import { PresetName } from "./presetName.js";
export type { BeaconPreset } from "./types.js";
export * from "./forkName.js";
export { presetToJson } from "./json.js";
export { PresetName };
/**
 * The preset name currently exported by this library
 *
 * The `LODESTAR_PRESET` environment variable is used to select the active preset
 * If `LODESTAR_PRESET` is not set, the default is `mainnet`.
 *
 * The active preset can be manually overridden with `setActivePreset`
 */
export declare const ACTIVE_PRESET: PresetName;
export declare const activePreset: {
    MAX_COMMITTEES_PER_SLOT: number;
    TARGET_COMMITTEE_SIZE: number;
    MAX_VALIDATORS_PER_COMMITTEE: number;
    SHUFFLE_ROUND_COUNT: number;
    HYSTERESIS_QUOTIENT: number;
    HYSTERESIS_DOWNWARD_MULTIPLIER: number;
    HYSTERESIS_UPWARD_MULTIPLIER: number;
    MIN_DEPOSIT_AMOUNT: number;
    MAX_EFFECTIVE_BALANCE: number;
    EFFECTIVE_BALANCE_INCREMENT: number;
    MIN_ATTESTATION_INCLUSION_DELAY: number;
    SLOTS_PER_EPOCH: number;
    MIN_SEED_LOOKAHEAD: number;
    MAX_SEED_LOOKAHEAD: number;
    EPOCHS_PER_ETH1_VOTING_PERIOD: number;
    SLOTS_PER_HISTORICAL_ROOT: number;
    MIN_EPOCHS_TO_INACTIVITY_PENALTY: number;
    EPOCHS_PER_HISTORICAL_VECTOR: number;
    EPOCHS_PER_SLASHINGS_VECTOR: number;
    HISTORICAL_ROOTS_LIMIT: number;
    VALIDATOR_REGISTRY_LIMIT: number;
    BASE_REWARD_FACTOR: number;
    WHISTLEBLOWER_REWARD_QUOTIENT: number;
    PROPOSER_REWARD_QUOTIENT: number;
    INACTIVITY_PENALTY_QUOTIENT: number;
    MIN_SLASHING_PENALTY_QUOTIENT: number;
    PROPORTIONAL_SLASHING_MULTIPLIER: number;
    MAX_PROPOSER_SLASHINGS: number;
    MAX_ATTESTER_SLASHINGS: number;
    MAX_ATTESTATIONS: number;
    MAX_DEPOSITS: number;
    MAX_VOLUNTARY_EXITS: number;
    SYNC_COMMITTEE_SIZE: number;
    EPOCHS_PER_SYNC_COMMITTEE_PERIOD: number;
    INACTIVITY_PENALTY_QUOTIENT_ALTAIR: number;
    MIN_SLASHING_PENALTY_QUOTIENT_ALTAIR: number;
    PROPORTIONAL_SLASHING_MULTIPLIER_ALTAIR: number;
    MIN_SYNC_COMMITTEE_PARTICIPANTS: number;
    UPDATE_TIMEOUT: number;
    INACTIVITY_PENALTY_QUOTIENT_BELLATRIX: number;
    MIN_SLASHING_PENALTY_QUOTIENT_BELLATRIX: number;
    PROPORTIONAL_SLASHING_MULTIPLIER_BELLATRIX: number;
    MAX_BYTES_PER_TRANSACTION: number;
    MAX_TRANSACTIONS_PER_PAYLOAD: number;
    BYTES_PER_LOGS_BLOOM: number;
    MAX_EXTRA_DATA_BYTES: number;
    MAX_BLS_TO_EXECUTION_CHANGES: number;
    MAX_WITHDRAWALS_PER_PAYLOAD: number;
    MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP: number;
    FIELD_ELEMENTS_PER_BLOB: number;
    MAX_BLOB_COMMITMENTS_PER_BLOCK: number;
    KZG_COMMITMENT_INCLUSION_PROOF_DEPTH: number;
    MAX_DEPOSIT_REQUESTS_PER_PAYLOAD: number;
    MAX_WITHDRAWAL_REQUESTS_PER_PAYLOAD: number;
    MAX_ATTESTER_SLASHINGS_ELECTRA: number;
    MAX_ATTESTATIONS_ELECTRA: number;
    MAX_PENDING_PARTIALS_PER_WITHDRAWALS_SWEEP: number;
    MAX_PENDING_DEPOSITS_PER_EPOCH: number;
    MAX_EFFECTIVE_BALANCE_ELECTRA: number;
    MIN_SLASHING_PENALTY_QUOTIENT_ELECTRA: number;
    MIN_ACTIVATION_BALANCE: number;
    PENDING_DEPOSITS_LIMIT: number;
    PENDING_PARTIAL_WITHDRAWALS_LIMIT: number;
    PENDING_CONSOLIDATIONS_LIMIT: number;
    MAX_CONSOLIDATION_REQUESTS_PER_PAYLOAD: number;
    WHISTLEBLOWER_REWARD_QUOTIENT_ELECTRA: number;
    FIELD_ELEMENTS_PER_CELL: number;
    FIELD_ELEMENTS_PER_EXT_BLOB: number;
    KZG_COMMITMENTS_INCLUSION_PROOF_DEPTH: number;
};
export declare const MAX_COMMITTEES_PER_SLOT: number, TARGET_COMMITTEE_SIZE: number, MAX_VALIDATORS_PER_COMMITTEE: number, SHUFFLE_ROUND_COUNT: number, HYSTERESIS_QUOTIENT: number, HYSTERESIS_DOWNWARD_MULTIPLIER: number, HYSTERESIS_UPWARD_MULTIPLIER: number, MIN_DEPOSIT_AMOUNT: number, MAX_EFFECTIVE_BALANCE: number, EFFECTIVE_BALANCE_INCREMENT: number, MIN_ATTESTATION_INCLUSION_DELAY: number, SLOTS_PER_EPOCH: number, MIN_SEED_LOOKAHEAD: number, MAX_SEED_LOOKAHEAD: number, EPOCHS_PER_ETH1_VOTING_PERIOD: number, SLOTS_PER_HISTORICAL_ROOT: number, MIN_EPOCHS_TO_INACTIVITY_PENALTY: number, EPOCHS_PER_HISTORICAL_VECTOR: number, EPOCHS_PER_SLASHINGS_VECTOR: number, HISTORICAL_ROOTS_LIMIT: number, VALIDATOR_REGISTRY_LIMIT: number, BASE_REWARD_FACTOR: number, WHISTLEBLOWER_REWARD_QUOTIENT: number, PROPOSER_REWARD_QUOTIENT: number, INACTIVITY_PENALTY_QUOTIENT: number, MIN_SLASHING_PENALTY_QUOTIENT: number, PROPORTIONAL_SLASHING_MULTIPLIER: number, MAX_PROPOSER_SLASHINGS: number, MAX_ATTESTER_SLASHINGS: number, MAX_ATTESTATIONS: number, MAX_DEPOSITS: number, MAX_VOLUNTARY_EXITS: number, SYNC_COMMITTEE_SIZE: number, EPOCHS_PER_SYNC_COMMITTEE_PERIOD: number, INACTIVITY_PENALTY_QUOTIENT_ALTAIR: number, MIN_SLASHING_PENALTY_QUOTIENT_ALTAIR: number, PROPORTIONAL_SLASHING_MULTIPLIER_ALTAIR: number, MIN_SYNC_COMMITTEE_PARTICIPANTS: number, UPDATE_TIMEOUT: number, INACTIVITY_PENALTY_QUOTIENT_BELLATRIX: number, MIN_SLASHING_PENALTY_QUOTIENT_BELLATRIX: number, PROPORTIONAL_SLASHING_MULTIPLIER_BELLATRIX: number, MAX_BYTES_PER_TRANSACTION: number, MAX_TRANSACTIONS_PER_PAYLOAD: number, BYTES_PER_LOGS_BLOOM: number, MAX_EXTRA_DATA_BYTES: number, MAX_BLS_TO_EXECUTION_CHANGES: number, MAX_WITHDRAWALS_PER_PAYLOAD: number, MAX_VALIDATORS_PER_WITHDRAWALS_SWEEP: number, FIELD_ELEMENTS_PER_BLOB: number, MAX_BLOB_COMMITMENTS_PER_BLOCK: number, KZG_COMMITMENT_INCLUSION_PROOF_DEPTH: number, MAX_EFFECTIVE_BALANCE_ELECTRA: number, MIN_ACTIVATION_BALANCE: number, PENDING_DEPOSITS_LIMIT: number, PENDING_PARTIAL_WITHDRAWALS_LIMIT: number, PENDING_CONSOLIDATIONS_LIMIT: number, MIN_SLASHING_PENALTY_QUOTIENT_ELECTRA: number, MAX_CONSOLIDATION_REQUESTS_PER_PAYLOAD: number, MAX_DEPOSIT_REQUESTS_PER_PAYLOAD: number, MAX_WITHDRAWAL_REQUESTS_PER_PAYLOAD: number, MAX_ATTESTER_SLASHINGS_ELECTRA: number, MAX_ATTESTATIONS_ELECTRA: number, MAX_PENDING_PARTIALS_PER_WITHDRAWALS_SWEEP: number, MAX_PENDING_DEPOSITS_PER_EPOCH: number, WHISTLEBLOWER_REWARD_QUOTIENT_ELECTRA: number, FIELD_ELEMENTS_PER_CELL: number, FIELD_ELEMENTS_PER_EXT_BLOB: number, KZG_COMMITMENTS_INCLUSION_PROOF_DEPTH: number;
export declare const GENESIS_SLOT = 0;
export declare const GENESIS_EPOCH = 0;
export declare const FAR_FUTURE_EPOCH: number;
export declare const BASE_REWARDS_PER_EPOCH = 4;
export declare const DEPOSIT_CONTRACT_TREE_DEPTH: number;
export declare const JUSTIFICATION_BITS_LENGTH = 4;
export declare const ZERO_HASH: Buffer<ArrayBuffer>;
export declare const ZERO_HASH_HEX: string;
export declare const BLS_WITHDRAWAL_PREFIX = 0;
export declare const ETH1_ADDRESS_WITHDRAWAL_PREFIX = 1;
export declare const COMPOUNDING_WITHDRAWAL_PREFIX = 2;
export declare const DOMAIN_BEACON_PROPOSER: Uint8Array<ArrayBuffer>;
export declare const DOMAIN_BEACON_ATTESTER: Uint8Array<ArrayBuffer>;
export declare const DOMAIN_RANDAO: Uint8Array<ArrayBuffer>;
export declare const DOMAIN_DEPOSIT: Uint8Array<ArrayBuffer>;
export declare const DOMAIN_VOLUNTARY_EXIT: Uint8Array<ArrayBuffer>;
export declare const DOMAIN_SELECTION_PROOF: Uint8Array<ArrayBuffer>;
export declare const DOMAIN_AGGREGATE_AND_PROOF: Uint8Array<ArrayBuffer>;
export declare const DOMAIN_SYNC_COMMITTEE: Uint8Array<ArrayBuffer>;
export declare const DOMAIN_SYNC_COMMITTEE_SELECTION_PROOF: Uint8Array<ArrayBuffer>;
export declare const DOMAIN_CONTRIBUTION_AND_PROOF: Uint8Array<ArrayBuffer>;
export declare const DOMAIN_BLS_TO_EXECUTION_CHANGE: Uint8Array<ArrayBuffer>;
/**
 * `DOMAIN_APPLICATION_MASK` reserves the rest of the bitspace in `DomainType` for application
 * usage. This means for some `DomainType` `DOMAIN_SOME_APPLICATION`, `DOMAIN_SOME_APPLICATION
 * & DOMAIN_APPLICATION_MASK` **MUST** be non-zero. This expression for any other `DomainType`
 * in the consensus specs **MUST** be zero.
 */
export declare const DOMAIN_APPLICATION_MASK: Uint8Array<ArrayBuffer>;
export declare const DOMAIN_APPLICATION_BUILDER: Uint8Array<ArrayBuffer>;
export declare const TIMELY_SOURCE_FLAG_INDEX = 0;
export declare const TIMELY_TARGET_FLAG_INDEX = 1;
export declare const TIMELY_HEAD_FLAG_INDEX = 2;
export declare const TIMELY_SOURCE_WEIGHT = 14;
export declare const TIMELY_TARGET_WEIGHT = 26;
export declare const TIMELY_HEAD_WEIGHT = 14;
export declare const SYNC_REWARD_WEIGHT = 2;
export declare const PROPOSER_WEIGHT = 8;
export declare const WEIGHT_DENOMINATOR = 64;
export declare const PARTICIPATION_FLAG_WEIGHTS: number[];
export declare const TARGET_AGGREGATORS_PER_COMMITTEE = 16;
export declare const RANDOM_SUBNETS_PER_VALIDATOR = 1;
export declare const EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION = 256;
/** Rationale: https://github.com/ethereum/consensus-specs/blob/v1.1.10/specs/phase0/p2p-interface.md#why-are-there-attestation_subnet_count-attestation-subnets */
export declare const ATTESTATION_SUBNET_COUNT = 64;
export declare const SUBNETS_PER_NODE = 2;
export declare const NODE_ID_BITS = 256;
export declare const ATTESTATION_SUBNET_PREFIX_BITS: number;
export declare const EPOCHS_PER_SUBNET_SUBSCRIPTION = 256;
export declare const TARGET_AGGREGATORS_PER_SYNC_SUBCOMMITTEE = 16;
export declare const SYNC_COMMITTEE_SUBNET_COUNT = 4;
export declare const SYNC_COMMITTEE_SUBNET_SIZE: number;
export declare const MAX_REQUEST_BLOCKS: number;
export declare const MAX_REQUEST_BLOCKS_DENEB: number;
/**
 * ```ts
 * config.types.altair.BeaconState.getPathGindex(["finalizedCheckpoint", "root"])
 * ```
 */
export declare const FINALIZED_ROOT_GINDEX = 105;
/**
 * ```ts
 * Math.floor(Math.log2(FINALIZED_ROOT_GINDEX))
 * ```
 */
export declare const FINALIZED_ROOT_DEPTH = 6;
export declare const FINALIZED_ROOT_INDEX = 41;
/**
 * ```ts
 * types.ssz.capella.BeaconBlockBody.getPathInfo(['executionPayload']).gindex
 * ```
 */
export declare const BLOCK_BODY_EXECUTION_PAYLOAD_GINDEX = 25;
/**
 * ```ts
 * Math.floor(Math.log2(EXECUTION_PAYLOAD_GINDEX))
 * ```
 */
export declare const BLOCK_BODY_EXECUTION_PAYLOAD_DEPTH = 4;
export declare const BLOCK_BODY_EXECUTION_PAYLOAD_INDEX = 9;
/**
 * ```ts
 * config.types.altair.BeaconState.getPathGindex(["nextSyncCommittee"])
 * ```
 */
export declare const NEXT_SYNC_COMMITTEE_GINDEX = 55;
/**
 * ```ts
 * Math.floor(Math.log2(NEXT_SYNC_COMMITTEE_GINDEX))
 * ```
 */
export declare const NEXT_SYNC_COMMITTEE_DEPTH = 5;
export declare const NEXT_SYNC_COMMITTEE_INDEX = 23;
export declare const MAX_REQUEST_LIGHT_CLIENT_UPDATES = 128;
export declare const MAX_REQUEST_LIGHT_CLIENT_COMMITTEE_HASHES = 128;
/**
 * Optimistic sync
 */
export declare const SAFE_SLOTS_TO_IMPORT_OPTIMISTICALLY = 128;
export declare const INTERVALS_PER_SLOT = 3;
export declare const BYTES_PER_FIELD_ELEMENT = 32;
export declare const BLOB_TX_TYPE = 3;
export declare const VERSIONED_HASH_VERSION_KZG = 1;
export declare const KZG_COMMITMENT_GINDEX0: number;
export declare const KZG_COMMITMENT_SUBTREE_INDEX0: number;
export declare const BLOBSIDECAR_FIXED_SIZE: number;
export declare const UNSET_DEPOSIT_REQUESTS_START_INDEX: bigint;
export declare const FULL_EXIT_REQUEST_AMOUNT = 0;
export declare const FINALIZED_ROOT_GINDEX_ELECTRA = 169;
export declare const FINALIZED_ROOT_DEPTH_ELECTRA = 7;
export declare const FINALIZED_ROOT_INDEX_ELECTRA = 41;
export declare const NEXT_SYNC_COMMITTEE_GINDEX_ELECTRA = 87;
export declare const NEXT_SYNC_COMMITTEE_DEPTH_ELECTRA = 6;
export declare const NEXT_SYNC_COMMITTEE_INDEX_ELECTRA = 23;
export declare const DEPOSIT_REQUEST_TYPE = 0;
export declare const WITHDRAWAL_REQUEST_TYPE = 1;
export declare const CONSOLIDATION_REQUEST_TYPE = 2;
export declare const NUMBER_OF_COLUMNS: number;
export declare const BYTES_PER_CELL: number;
export declare const CELLS_PER_EXT_BLOB: number;
export declare const KZG_COMMITMENTS_GINDEX = 27;
export declare const KZG_COMMITMENTS_SUBTREE_INDEX: number;
export declare const MAX_REQUEST_DATA_COLUMN_SIDECARS: number;
export declare const DATA_COLUMN_SIDECAR_SUBNET_COUNT = 128;
export declare const NUMBER_OF_CUSTODY_GROUPS = 128;
//# sourceMappingURL=index.d.ts.map