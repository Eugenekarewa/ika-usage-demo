/**
 * Fork code name in order of occurrence
 */
export declare enum ForkName {
    phase0 = "phase0",
    altair = "altair",
    bellatrix = "bellatrix",
    capella = "capella",
    deneb = "deneb",
    electra = "electra",
    fulu = "fulu"
}
/**
 * Fork sequence number in order of occurrence
 */
export declare enum ForkSeq {
    phase0 = 0,
    altair = 1,
    bellatrix = 2,
    capella = 3,
    deneb = 4,
    electra = 5,
    fulu = 6
}
export declare function highestFork<F extends ForkName>(forkNames: F[]): F;
export declare function lowestFork<F extends ForkName>(forkNames: F[]): F;
export type ForkAll = ForkName;
export declare const forkAll: ForkName[];
export type ForkPreAltair = ForkName.phase0;
export type ForkPostAltair = Exclude<ForkName, ForkPreAltair>;
export declare const forkPostAltair: (ForkName.altair | ForkName.bellatrix | ForkName.capella | ForkName.deneb | ForkName.electra | ForkName.fulu)[];
export declare function isForkPostAltair(fork: ForkName): fork is ForkPostAltair;
export type ForkPreBellatrix = ForkPreAltair | ForkName.altair;
export type ForkPostBellatrix = Exclude<ForkName, ForkPreBellatrix>;
export declare const forkPostBellatrix: (ForkName.bellatrix | ForkName.capella | ForkName.deneb | ForkName.electra | ForkName.fulu)[];
export declare function isForkPostBellatrix(fork: ForkName): fork is ForkPostBellatrix;
export type ForkPreCapella = ForkPreBellatrix | ForkName.bellatrix;
export type ForkPostCapella = Exclude<ForkName, ForkPreCapella>;
export declare const forkPostCapella: (ForkName.capella | ForkName.deneb | ForkName.electra | ForkName.fulu)[];
export declare function isForkPostCapella(fork: ForkName): fork is ForkPostCapella;
export type ForkPreDeneb = ForkPreCapella | ForkName.capella;
export type ForkPostDeneb = Exclude<ForkName, ForkPreDeneb>;
export declare const forkPostDeneb: (ForkName.deneb | ForkName.electra | ForkName.fulu)[];
export declare function isForkPostDeneb(fork: ForkName): fork is ForkPostDeneb;
export type ForkPreElectra = ForkPreDeneb | ForkName.deneb;
export type ForkPostElectra = Exclude<ForkName, ForkPreElectra>;
export declare const forkPostElectra: (ForkName.electra | ForkName.fulu)[];
export declare function isForkPostElectra(fork: ForkName): fork is ForkPostElectra;
export type ForkPreFulu = ForkPreElectra | ForkName.electra;
export type ForkPostFulu = Exclude<ForkName, ForkPreFulu>;
export declare const forkPostFulu: ForkName.fulu[];
export declare function isForkPostFulu(fork: ForkName): fork is ForkPostFulu;
/**
 * @deprecated Use `ForkPostAltair` instead.
 */
export type ForkLightClient = ForkPostAltair;
/**
 * @deprecated Use `ForkPreBellatrix` instead.
 */
export type ForkPreExecution = ForkPreBellatrix;
/**
 * @deprecated Use `ForkPostBellatrix` instead.
 */
export type ForkExecution = ForkPostBellatrix;
/**
 * @deprecated Use `ForkPreCapella` instead.
 */
export type ForkPreWithdrawals = ForkPreCapella;
/**
 * @deprecated Use `ForkPostCapella` instead.
 */
export type ForkWithdrawals = ForkPostCapella;
/**
 * @deprecated Use `ForkPreDeneb` instead.
 */
export type ForkPreBlobs = ForkPreDeneb;
/**
 * @deprecated Use `ForkPostDeneb` instead.
 */
export type ForkBlobs = ForkPostDeneb;
/**
 * @deprecated Use `forkPostAltair` instead.
 */
export declare const forkLightClient: (ForkName.altair | ForkName.bellatrix | ForkName.capella | ForkName.deneb | ForkName.electra | ForkName.fulu)[];
/**
 * @deprecated Use `isForkPostAltair` instead.
 */
export declare const isForkLightClient: typeof isForkPostAltair;
/**
 * @deprecated Use `forkPostBellatrix` instead.
 */
export declare const forkExecution: (ForkName.bellatrix | ForkName.capella | ForkName.deneb | ForkName.electra | ForkName.fulu)[];
/**
 * @deprecated Use `isForkPostBellatrix` instead.
 */
export declare const isForkExecution: typeof isForkPostBellatrix;
/**
 * @deprecated Use `forkPostCapella` instead.
 */
export declare const forkWithdrawals: (ForkName.capella | ForkName.deneb | ForkName.electra | ForkName.fulu)[];
/**
 * @deprecated Use `isForkPostCapella` instead.
 */
export declare const isForkWithdrawals: typeof isForkPostCapella;
/**
 * @deprecated Use `forkPostDeneb` instead.
 */
export declare const forkBlobs: (ForkName.deneb | ForkName.electra | ForkName.fulu)[];
/**
 * @deprecated Use `isForkPostDeneb` instead.
 */
export declare const isForkBlobs: typeof isForkPostDeneb;
//# sourceMappingURL=forkName.d.ts.map