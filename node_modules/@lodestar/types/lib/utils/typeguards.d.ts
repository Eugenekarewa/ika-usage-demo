import { ForkPostBellatrix, ForkPostDeneb, ForkPostElectra } from "@lodestar/params";
import { Attestation, BeaconBlockBody, BeaconBlockOrContents, BlindedBeaconBlock, BlindedBeaconBlockBody, BlockContents, ExecutionPayload, ExecutionPayloadAndBlobsBundle, ExecutionPayloadHeader, LightClientFinalityUpdate, LightClientUpdate, SignedBeaconBlock, SignedBeaconBlockOrContents, SignedBlindedBeaconBlock, SignedBlockContents, SingleAttestation } from "../types.js";
export declare function isExecutionPayload<F extends ForkPostBellatrix>(payload: ExecutionPayload<F> | ExecutionPayloadHeader<F>): payload is ExecutionPayload<F>;
export declare function isExecutionPayloadHeader<F extends ForkPostBellatrix>(payload: ExecutionPayload<F> | ExecutionPayloadHeader<F>): payload is ExecutionPayloadHeader<F>;
export declare function isExecutionPayloadAndBlobsBundle<F extends ForkPostDeneb>(data: ExecutionPayload<ForkPostBellatrix> | ExecutionPayloadAndBlobsBundle<F>): data is ExecutionPayloadAndBlobsBundle<F>;
export declare function isBlindedBeaconBlock<F extends ForkPostBellatrix>(block: BeaconBlockOrContents | SignedBeaconBlockOrContents): block is BlindedBeaconBlock<F>;
export declare function isBlindedSignedBeaconBlock<F extends ForkPostBellatrix>(signedBlock: SignedBeaconBlock | SignedBeaconBlockOrContents): signedBlock is SignedBlindedBeaconBlock<F>;
export declare function isBlindedBeaconBlockBody<F extends ForkPostBellatrix>(body: BeaconBlockBody | BlindedBeaconBlockBody): body is BlindedBeaconBlockBody<F>;
export declare function isBlockContents<F extends ForkPostDeneb>(data: BeaconBlockOrContents | SignedBeaconBlockOrContents): data is BlockContents<F>;
export declare function isSignedBlockContents<F extends ForkPostDeneb>(data: SignedBeaconBlockOrContents | BeaconBlockOrContents): data is SignedBlockContents<F>;
export declare function isElectraAttestation(attestation: Attestation): attestation is Attestation<ForkPostElectra>;
export declare function isElectraSingleAttestation(singleAttestation: SingleAttestation): singleAttestation is SingleAttestation<ForkPostElectra>;
export declare function isElectraLightClientUpdate(update: LightClientUpdate): update is LightClientUpdate<ForkPostElectra>;
export declare function isELectraLightClientFinalityUpdate(update: LightClientFinalityUpdate): update is LightClientFinalityUpdate<ForkPostElectra>;
//# sourceMappingURL=typeguards.d.ts.map