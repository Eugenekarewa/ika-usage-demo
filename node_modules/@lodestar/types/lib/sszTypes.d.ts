import { CompositeType, CompositeView, CompositeViewDU, ContainerType, ValueOf } from "@chainsafe/ssz";
import { ForkName } from "@lodestar/params";
export * from "./primitive/sszTypes.js";
/**
 * Index the ssz types that differ by fork
 * A record of AllForksSSZTypes indexed by fork
 */
declare const typesByFork: {
    phase0: {
        AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
        BeaconBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockHeaderBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeaderBigint: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Checkpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CheckpointBigint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CommitteeBits: import("@chainsafe/ssz").BitListType;
        CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        DepositMessage: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
        }>;
        DepositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        DepositEvent: ContainerType<{
            depositData: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        Eth1DataOrdered: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Block: ContainerType<{
            timestamp: import("@chainsafe/ssz").UintNumberType;
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
        }>;
        Fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        ForkData: ContainerType<{
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ENRForkID: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
            nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalBatch: ContainerType<{
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        HistoricalBatchRoots: ContainerType<{
            blockRoots: import("@chainsafe/ssz").ByteVectorType;
            stateRoots: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Validator: import("./phase0/validator.js").ValidatorNodeStructType;
        Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        Balances: import("@chainsafe/ssz").ListUintNum64Type;
        RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        JustificationBits: import("@chainsafe/ssz").BitVectorType;
        AttestationData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        AttestationDataBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        IndexedAttestation: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        IndexedAttestationBigint: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PendingAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SigningData: ContainerType<{
            objectRoot: import("@chainsafe/ssz").ByteVectorType;
            domain: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Attestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SingleAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        AttesterSlashing: ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        Deposit: ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        ProposerSlashing: ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        VoluntaryExit: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SignedVoluntaryExit: ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockBody: ContainerType<{
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: ContainerType<{
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
        BeaconState: ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
            balances: import("@chainsafe/ssz").ListUintNum64Type;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                inclusionDelay: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
            }>>;
            currentEpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                inclusionDelay: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
            }>>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        CommitteeAssignment: ContainerType<{
            validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            committeeIndex: import("@chainsafe/ssz").UintNumberType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>;
        AggregateAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedAggregateAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                aggregate: ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Status: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
            finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
            headRoot: import("@chainsafe/ssz").ByteVectorType;
            headSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        Goodbye: import("@chainsafe/ssz").UintBigintType;
        Ping: import("@chainsafe/ssz").UintBigintType;
        Metadata: ContainerType<{
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
        }>;
        BeaconBlocksByRangeRequest: ContainerType<{
            startSlot: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
            step: import("@chainsafe/ssz").UintNumberType;
        }>;
        BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Genesis: ContainerType<{
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
    altair: {
        SyncSubnets: import("@chainsafe/ssz").BitVectorType;
        Metadata: ContainerType<{
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
            syncnets: import("@chainsafe/ssz").BitVectorType;
        }>;
        SyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeMessage: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeContribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ContributionAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedContributionAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                contribution: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                    aggregationBits: import("@chainsafe/ssz").BitVectorType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncAggregatorSelectionData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        SyncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockBody: ContainerType<{
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: ContainerType<{
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: ContainerType<{
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        BeaconState: ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
            balances: import("@chainsafe/ssz").ListUintNum64Type;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        LightClientHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        LightClientBootstrap: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientFinalityUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientOptimisticUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientUpdatesByRange: ContainerType<{
            startPeriod: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientStore: ContainerType<{
            snapshot: ContainerType<{
                header: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                currentSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                nextSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                finalizedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signatureSlot: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
        AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
        BeaconBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockHeaderBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeaderBigint: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Checkpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CheckpointBigint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CommitteeBits: import("@chainsafe/ssz").BitListType;
        CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        DepositMessage: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
        }>;
        DepositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        DepositEvent: ContainerType<{
            depositData: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        Eth1DataOrdered: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Block: ContainerType<{
            timestamp: import("@chainsafe/ssz").UintNumberType;
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
        }>;
        Fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        ForkData: ContainerType<{
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ENRForkID: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
            nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalBatch: ContainerType<{
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        HistoricalBatchRoots: ContainerType<{
            blockRoots: import("@chainsafe/ssz").ByteVectorType;
            stateRoots: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Validator: import("./phase0/validator.js").ValidatorNodeStructType;
        Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        Balances: import("@chainsafe/ssz").ListUintNum64Type;
        RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        JustificationBits: import("@chainsafe/ssz").BitVectorType;
        AttestationData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        AttestationDataBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        IndexedAttestation: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        IndexedAttestationBigint: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PendingAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SigningData: ContainerType<{
            objectRoot: import("@chainsafe/ssz").ByteVectorType;
            domain: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Attestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SingleAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        AttesterSlashing: ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        Deposit: ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        ProposerSlashing: ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        VoluntaryExit: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SignedVoluntaryExit: ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
        CommitteeAssignment: ContainerType<{
            validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            committeeIndex: import("@chainsafe/ssz").UintNumberType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>;
        AggregateAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedAggregateAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                aggregate: ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Status: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
            finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
            headRoot: import("@chainsafe/ssz").ByteVectorType;
            headSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        Goodbye: import("@chainsafe/ssz").UintBigintType;
        Ping: import("@chainsafe/ssz").UintBigintType;
        BeaconBlocksByRangeRequest: ContainerType<{
            startSlot: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
            step: import("@chainsafe/ssz").UintNumberType;
        }>;
        BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Genesis: ContainerType<{
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
    bellatrix: {
        Transaction: import("@chainsafe/ssz").ByteListType;
        Transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        CommonExecutionPayloadType: ContainerType<{
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ExecutionPayload: ContainerType<{
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ExecutionPayloadHeader: ContainerType<{
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockBody: ContainerType<{
            executionPayload: ContainerType<{
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: ContainerType<{
                executionPayload: ContainerType<{
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: ContainerType<{
                    executionPayload: ContainerType<{
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PowBlock: ContainerType<{
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            totalDifficulty: import("@chainsafe/ssz").UintBigintType;
        }>;
        BeaconState: ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
            balances: import("@chainsafe/ssz").ListUintNum64Type;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            latestExecutionPayloadHeader: ContainerType<{
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        BlindedBeaconBlockBody: ContainerType<{
            executionPayloadHeader: ContainerType<{
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BlindedBeaconBlock: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: ContainerType<{
                executionPayloadHeader: ContainerType<{
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBlindedBeaconBlock: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: ContainerType<{
                    executionPayloadHeader: ContainerType<{
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ValidatorRegistrationV1: ContainerType<{
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedValidatorRegistrationV1: ContainerType<{
            message: ContainerType<{
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BuilderBid: ContainerType<{
            header: ContainerType<{
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBuilderBid: ContainerType<{
            message: ContainerType<{
                header: ContainerType<{
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                value: import("@chainsafe/ssz").UintBigintType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PayloadAttributes: ContainerType<{
            timestamp: import("@chainsafe/ssz").UintNumberType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            suggestedFeeRecipient: import("./index.js").StringType<string>;
        }>;
        SSEPayloadAttributesCommon: ContainerType<{
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SSEPayloadAttributes: ContainerType<{
            payloadAttributes: ContainerType<{
                timestamp: import("@chainsafe/ssz").UintNumberType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                suggestedFeeRecipient: import("./index.js").StringType<string>;
            }>;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncSubnets: import("@chainsafe/ssz").BitVectorType;
        Metadata: ContainerType<{
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
            syncnets: import("@chainsafe/ssz").BitVectorType;
        }>;
        SyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeMessage: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeContribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ContributionAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedContributionAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                contribution: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                    aggregationBits: import("@chainsafe/ssz").BitVectorType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncAggregatorSelectionData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        SyncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        LightClientHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        LightClientBootstrap: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientFinalityUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientOptimisticUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientUpdatesByRange: ContainerType<{
            startPeriod: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientStore: ContainerType<{
            snapshot: ContainerType<{
                header: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                currentSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                nextSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                finalizedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signatureSlot: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
        AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
        BeaconBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockHeaderBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeaderBigint: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Checkpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CheckpointBigint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CommitteeBits: import("@chainsafe/ssz").BitListType;
        CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        DepositMessage: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
        }>;
        DepositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        DepositEvent: ContainerType<{
            depositData: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        Eth1DataOrdered: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Block: ContainerType<{
            timestamp: import("@chainsafe/ssz").UintNumberType;
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
        }>;
        Fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        ForkData: ContainerType<{
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ENRForkID: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
            nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalBatch: ContainerType<{
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        HistoricalBatchRoots: ContainerType<{
            blockRoots: import("@chainsafe/ssz").ByteVectorType;
            stateRoots: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Validator: import("./phase0/validator.js").ValidatorNodeStructType;
        Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        Balances: import("@chainsafe/ssz").ListUintNum64Type;
        RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        JustificationBits: import("@chainsafe/ssz").BitVectorType;
        AttestationData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        AttestationDataBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        IndexedAttestation: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        IndexedAttestationBigint: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PendingAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SigningData: ContainerType<{
            objectRoot: import("@chainsafe/ssz").ByteVectorType;
            domain: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Attestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SingleAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        AttesterSlashing: ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        Deposit: ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        ProposerSlashing: ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        VoluntaryExit: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SignedVoluntaryExit: ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
        CommitteeAssignment: ContainerType<{
            validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            committeeIndex: import("@chainsafe/ssz").UintNumberType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>;
        AggregateAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedAggregateAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                aggregate: ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Status: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
            finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
            headRoot: import("@chainsafe/ssz").ByteVectorType;
            headSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        Goodbye: import("@chainsafe/ssz").UintBigintType;
        Ping: import("@chainsafe/ssz").UintBigintType;
        BeaconBlocksByRangeRequest: ContainerType<{
            startSlot: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
            step: import("@chainsafe/ssz").UintNumberType;
        }>;
        BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Genesis: ContainerType<{
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
    capella: {
        Withdrawal: ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>;
        BLSToExecutionChange: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        SignedBLSToExecutionChange: ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        ExecutionPayload: ContainerType<{
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ExecutionPayloadHeader: ContainerType<{
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BLSToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        BeaconBlockBody: ContainerType<{
            executionPayload: ContainerType<{
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: ContainerType<{
                executionPayload: ContainerType<{
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("./utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        SignedBeaconBlock: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                body: ContainerType<{
                    executionPayload: ContainerType<{
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("./utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BuilderBid: ContainerType<{
            header: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBuilderBid: ContainerType<{
            message: ContainerType<{
                header: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                value: import("@chainsafe/ssz").UintBigintType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        HistoricalSummary: ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        HistoricalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        BeaconState: ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
            balances: import("@chainsafe/ssz").ListUintNum64Type;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            latestExecutionPayloadHeader: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
            nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
            historicalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
                stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BlindedBeaconBlockBody: ContainerType<{
            executionPayloadHeader: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BlindedBeaconBlock: ContainerType<{
            body: ContainerType<{
                executionPayloadHeader: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBlindedBeaconBlock: ContainerType<{
            message: ContainerType<{
                body: ContainerType<{
                    executionPayloadHeader: ContainerType<{
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        LightClientHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientBootstrap: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientFinalityUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientOptimisticUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientStore: ContainerType<{
            snapshot: ContainerType<{
                header: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                currentSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                nextSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                finalizedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signatureSlot: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
        PayloadAttributes: ContainerType<{
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            suggestedFeeRecipient: import("./index.js").StringType<string>;
        }>;
        SSEPayloadAttributes: ContainerType<{
            payloadAttributes: ContainerType<{
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                suggestedFeeRecipient: import("./index.js").StringType<string>;
            }>;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Transaction: import("@chainsafe/ssz").ByteListType;
        Transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        CommonExecutionPayloadType: ContainerType<{
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PowBlock: ContainerType<{
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            totalDifficulty: import("@chainsafe/ssz").UintBigintType;
        }>;
        ValidatorRegistrationV1: ContainerType<{
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedValidatorRegistrationV1: ContainerType<{
            message: ContainerType<{
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SSEPayloadAttributesCommon: ContainerType<{
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncSubnets: import("@chainsafe/ssz").BitVectorType;
        Metadata: ContainerType<{
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
            syncnets: import("@chainsafe/ssz").BitVectorType;
        }>;
        SyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeMessage: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeContribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ContributionAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedContributionAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                contribution: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                    aggregationBits: import("@chainsafe/ssz").BitVectorType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncAggregatorSelectionData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        SyncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        LightClientUpdatesByRange: ContainerType<{
            startPeriod: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
        }>;
        AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
        BeaconBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockHeaderBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeaderBigint: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Checkpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CheckpointBigint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CommitteeBits: import("@chainsafe/ssz").BitListType;
        CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        DepositMessage: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
        }>;
        DepositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        DepositEvent: ContainerType<{
            depositData: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        Eth1DataOrdered: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Block: ContainerType<{
            timestamp: import("@chainsafe/ssz").UintNumberType;
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
        }>;
        Fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        ForkData: ContainerType<{
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ENRForkID: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
            nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalBatch: ContainerType<{
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        HistoricalBatchRoots: ContainerType<{
            blockRoots: import("@chainsafe/ssz").ByteVectorType;
            stateRoots: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Validator: import("./phase0/validator.js").ValidatorNodeStructType;
        Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        Balances: import("@chainsafe/ssz").ListUintNum64Type;
        RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        JustificationBits: import("@chainsafe/ssz").BitVectorType;
        AttestationData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        AttestationDataBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        IndexedAttestation: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        IndexedAttestationBigint: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PendingAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SigningData: ContainerType<{
            objectRoot: import("@chainsafe/ssz").ByteVectorType;
            domain: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Attestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SingleAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        AttesterSlashing: ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        Deposit: ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        ProposerSlashing: ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        VoluntaryExit: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SignedVoluntaryExit: ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
        CommitteeAssignment: ContainerType<{
            validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            committeeIndex: import("@chainsafe/ssz").UintNumberType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>;
        AggregateAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedAggregateAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                aggregate: ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Status: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
            finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
            headRoot: import("@chainsafe/ssz").ByteVectorType;
            headSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        Goodbye: import("@chainsafe/ssz").UintBigintType;
        Ping: import("@chainsafe/ssz").UintBigintType;
        BeaconBlocksByRangeRequest: ContainerType<{
            startSlot: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
            step: import("@chainsafe/ssz").UintNumberType;
        }>;
        BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Genesis: ContainerType<{
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
    deneb: {
        G1Point: import("@chainsafe/ssz").ByteVectorType;
        G2Point: import("@chainsafe/ssz").ByteVectorType;
        BLSFieldElement: import("@chainsafe/ssz").ByteVectorType;
        KZGCommitment: import("@chainsafe/ssz").ByteVectorType;
        KZGProof: import("@chainsafe/ssz").ByteVectorType;
        Blob: import("@chainsafe/ssz").ByteVectorType;
        Blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        BlindedBlob: import("@chainsafe/ssz").ByteVectorType;
        BlindedBlobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        VersionedHash: import("@chainsafe/ssz").ByteVectorType;
        BlobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        KZGProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        BlobSidecarsByRangeRequest: ContainerType<{
            startSlot: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
        }>;
        BlobIdentifier: ContainerType<{
            blockRoot: import("@chainsafe/ssz").ByteVectorType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>;
        ExecutionPayload: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ExecutionPayloadHeader: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockBody: ContainerType<{
            executionPayload: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BeaconBlock: ContainerType<{
            body: ContainerType<{
                executionPayload: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("./utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlock: ContainerType<{
            message: ContainerType<{
                body: ContainerType<{
                    executionPayload: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("./utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        KzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        BlobSidecar: ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            blob: import("@chainsafe/ssz").ByteVectorType;
            kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
            kzgProof: import("@chainsafe/ssz").ByteVectorType;
            signedBlockHeader: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        BlobSidecars: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            blob: import("@chainsafe/ssz").ByteVectorType;
            kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
            kzgProof: import("@chainsafe/ssz").ByteVectorType;
            signedBlockHeader: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>>;
        BlobsBundle: ContainerType<{
            commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        BlindedBeaconBlockBody: ContainerType<{
            executionPayloadHeader: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        BlindedBeaconBlock: ContainerType<{
            body: ContainerType<{
                executionPayloadHeader: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBlindedBeaconBlock: ContainerType<{
            message: ContainerType<{
                body: ContainerType<{
                    executionPayloadHeader: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BuilderBid: ContainerType<{
            header: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBuilderBid: ContainerType<{
            message: ContainerType<{
                header: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                value: import("@chainsafe/ssz").UintBigintType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ExecutionPayloadAndBlobsBundle: ContainerType<{
            executionPayload: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blobsBundle: ContainerType<{
                commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
        }>;
        BeaconState: ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
            balances: import("@chainsafe/ssz").ListUintNum64Type;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            latestExecutionPayloadHeader: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
            nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
            historicalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
                stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        LightClientHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientBootstrap: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientFinalityUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientOptimisticUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientStore: ContainerType<{
            snapshot: ContainerType<{
                header: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                currentSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                nextSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                finalizedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signatureSlot: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
        PayloadAttributes: ContainerType<{
            parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            suggestedFeeRecipient: import("./index.js").StringType<string>;
        }>;
        SSEPayloadAttributes: ContainerType<{
            payloadAttributes: ContainerType<{
                parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                suggestedFeeRecipient: import("./index.js").StringType<string>;
            }>;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BlockContents: ContainerType<{
            block: ContainerType<{
                body: ContainerType<{
                    executionPayload: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("./utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        SignedBlockContents: ContainerType<{
            signedBlock: ContainerType<{
                message: ContainerType<{
                    body: ContainerType<{
                        executionPayload: ContainerType<{
                            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                                index: import("@chainsafe/ssz").UintNumberType;
                                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                                address: import("./utils/executionAddress.js").ExecutionAddressType;
                                amount: import("@chainsafe/ssz").UintBigintType;
                            }>>;
                            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                            parentHash: import("@chainsafe/ssz").ByteVectorType;
                            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                            logsBloom: import("@chainsafe/ssz").ByteVectorType;
                            prevRandao: import("@chainsafe/ssz").ByteVectorType;
                            blockNumber: import("@chainsafe/ssz").UintNumberType;
                            gasLimit: import("@chainsafe/ssz").UintNumberType;
                            gasUsed: import("@chainsafe/ssz").UintNumberType;
                            timestamp: import("@chainsafe/ssz").UintNumberType;
                            extraData: import("@chainsafe/ssz").ByteListType;
                            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                            blockHash: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            message: ContainerType<{
                                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        syncAggregate: ContainerType<{
                            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                        eth1Data: ContainerType<{
                            depositRoot: import("@chainsafe/ssz").ByteVectorType;
                            depositCount: import("@chainsafe/ssz").UintNumberType;
                            blockHash: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        graffiti: import("@chainsafe/ssz").ByteVectorType;
                        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            signedHeader1: ContainerType<{
                                message: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signedHeader2: ContainerType<{
                                message: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>>;
                        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            attestation1: ContainerType<{
                                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                                data: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    index: import("@chainsafe/ssz").UintBigintType;
                                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                    source: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                    target: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            attestation2: ContainerType<{
                                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                                data: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    index: import("@chainsafe/ssz").UintBigintType;
                                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                    source: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                    target: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>>;
                        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            aggregationBits: import("@chainsafe/ssz").BitListType;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintNumberType;
                                index: import("@chainsafe/ssz").UintNumberType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintNumberType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintNumberType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                            data: ContainerType<{
                                pubkey: import("@chainsafe/ssz").ByteVectorType;
                                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                                amount: import("@chainsafe/ssz").UintNumberType;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>>;
                        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            message: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                    }>;
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        Withdrawal: ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>;
        BLSToExecutionChange: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        SignedBLSToExecutionChange: ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        BLSToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        HistoricalSummary: ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        HistoricalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        Transaction: import("@chainsafe/ssz").ByteListType;
        Transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        CommonExecutionPayloadType: ContainerType<{
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PowBlock: ContainerType<{
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            totalDifficulty: import("@chainsafe/ssz").UintBigintType;
        }>;
        ValidatorRegistrationV1: ContainerType<{
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedValidatorRegistrationV1: ContainerType<{
            message: ContainerType<{
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SSEPayloadAttributesCommon: ContainerType<{
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncSubnets: import("@chainsafe/ssz").BitVectorType;
        Metadata: ContainerType<{
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
            syncnets: import("@chainsafe/ssz").BitVectorType;
        }>;
        SyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeMessage: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeContribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ContributionAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedContributionAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                contribution: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                    aggregationBits: import("@chainsafe/ssz").BitVectorType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncAggregatorSelectionData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        SyncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        LightClientUpdatesByRange: ContainerType<{
            startPeriod: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
        }>;
        AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
        BeaconBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockHeaderBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeaderBigint: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Checkpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CheckpointBigint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CommitteeBits: import("@chainsafe/ssz").BitListType;
        CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        DepositMessage: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
        }>;
        DepositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        DepositEvent: ContainerType<{
            depositData: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        Eth1DataOrdered: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Block: ContainerType<{
            timestamp: import("@chainsafe/ssz").UintNumberType;
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
        }>;
        Fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        ForkData: ContainerType<{
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ENRForkID: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
            nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalBatch: ContainerType<{
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        HistoricalBatchRoots: ContainerType<{
            blockRoots: import("@chainsafe/ssz").ByteVectorType;
            stateRoots: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Validator: import("./phase0/validator.js").ValidatorNodeStructType;
        Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        Balances: import("@chainsafe/ssz").ListUintNum64Type;
        RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        JustificationBits: import("@chainsafe/ssz").BitVectorType;
        AttestationData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        AttestationDataBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        IndexedAttestation: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        IndexedAttestationBigint: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PendingAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SigningData: ContainerType<{
            objectRoot: import("@chainsafe/ssz").ByteVectorType;
            domain: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Attestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SingleAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        AttesterSlashing: ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        Deposit: ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        ProposerSlashing: ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        VoluntaryExit: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SignedVoluntaryExit: ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
        CommitteeAssignment: ContainerType<{
            validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            committeeIndex: import("@chainsafe/ssz").UintNumberType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>;
        AggregateAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedAggregateAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                aggregate: ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Status: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
            finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
            headRoot: import("@chainsafe/ssz").ByteVectorType;
            headSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        Goodbye: import("@chainsafe/ssz").UintBigintType;
        Ping: import("@chainsafe/ssz").UintBigintType;
        BeaconBlocksByRangeRequest: ContainerType<{
            startSlot: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
            step: import("@chainsafe/ssz").UintNumberType;
        }>;
        BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Genesis: ContainerType<{
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
    electra: {
        AggregationBits: import("@chainsafe/ssz").BitListType;
        CommitteeBits: import("@chainsafe/ssz").BitVectorType;
        AttestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        Attestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
            committeeBits: import("@chainsafe/ssz").BitVectorType;
        }>;
        SingleAttestation: ContainerType<{
            committeeIndex: import("@chainsafe/ssz").UintNumberType;
            attesterIndex: import("@chainsafe/ssz").UintNumberType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        IndexedAttestation: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        IndexedAttestationBigint: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        AttesterSlashing: ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        AggregateAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedAggregateAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                aggregate: ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        DepositRequest: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            index: import("@chainsafe/ssz").UintBigintType;
        }>;
        DepositRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            index: import("@chainsafe/ssz").UintBigintType;
        }>>;
        WithdrawalRequest: ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>;
        WithdrawalRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        ConsolidationRequest: ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ConsolidationRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        ExecutionRequests: ContainerType<{
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
                index: import("@chainsafe/ssz").UintBigintType;
            }>>;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                targetPubkey: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        ExecutionPayloadHeader: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ExecutionPayload: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockBody: ContainerType<{
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionPayload: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        BeaconBlock: ContainerType<{
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionPayload: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("./utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlock: ContainerType<{
            message: ContainerType<{
                body: ContainerType<{
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        committeeBits: import("@chainsafe/ssz").BitVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionPayload: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("./utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    executionRequests: ContainerType<{
                        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                            index: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                    }>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BlindedBeaconBlockBody: ContainerType<{
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionPayloadHeader: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        BlindedBeaconBlock: ContainerType<{
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionPayloadHeader: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBlindedBeaconBlock: ContainerType<{
            message: ContainerType<{
                body: ContainerType<{
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        committeeBits: import("@chainsafe/ssz").BitVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionPayloadHeader: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    executionRequests: ContainerType<{
                        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                            index: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                    }>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BuilderBid: ContainerType<{
            header: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBuilderBid: ContainerType<{
            message: ContainerType<{
                header: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
                value: import("@chainsafe/ssz").UintBigintType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PendingDeposit: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>;
        PendingDeposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>>;
        PendingPartialWithdrawal: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            amount: import("@chainsafe/ssz").UintBigintType;
            withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        PendingPartialWithdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            amount: import("@chainsafe/ssz").UintBigintType;
            withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
        }>>;
        PendingConsolidation: ContainerType<{
            sourceIndex: import("@chainsafe/ssz").UintNumberType;
            targetIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        PendingConsolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceIndex: import("@chainsafe/ssz").UintNumberType;
            targetIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
        BeaconState: ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
            balances: import("@chainsafe/ssz").ListUintNum64Type;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            latestExecutionPayloadHeader: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
            nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
            historicalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
                stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            depositRequestsStartIndex: import("@chainsafe/ssz").UintBigintType;
            depositBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
            exitBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
            earliestExitEpoch: import("@chainsafe/ssz").UintNumberType;
            consolidationBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
            earliestConsolidationEpoch: import("@chainsafe/ssz").UintNumberType;
            pendingDeposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
                slot: import("@chainsafe/ssz").UintNumberType;
            }>>;
            pendingPartialWithdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                amount: import("@chainsafe/ssz").UintBigintType;
                withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
            }>>;
            pendingConsolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceIndex: import("@chainsafe/ssz").UintNumberType;
                targetIndex: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
        LightClientBootstrap: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientFinalityUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientOptimisticUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientStore: ContainerType<{
            snapshot: ContainerType<{
                header: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                currentSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                nextSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                finalizedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signatureSlot: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
        PayloadAttributes: ContainerType<{
            parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            suggestedFeeRecipient: import("./index.js").StringType<string>;
        }>;
        SSEPayloadAttributes: ContainerType<{
            payloadAttributes: ContainerType<{
                parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                suggestedFeeRecipient: import("./index.js").StringType<string>;
            }>;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BlockContents: ContainerType<{
            block: ContainerType<{
                body: ContainerType<{
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        committeeBits: import("@chainsafe/ssz").BitVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionPayload: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("./utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    executionRequests: ContainerType<{
                        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                            index: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                    }>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        SignedBlockContents: ContainerType<{
            signedBlock: ContainerType<{
                message: ContainerType<{
                    body: ContainerType<{
                        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                        eth1Data: ContainerType<{
                            depositRoot: import("@chainsafe/ssz").ByteVectorType;
                            depositCount: import("@chainsafe/ssz").UintNumberType;
                            blockHash: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        graffiti: import("@chainsafe/ssz").ByteVectorType;
                        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            signedHeader1: ContainerType<{
                                message: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signedHeader2: ContainerType<{
                                message: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>>;
                        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            attestation1: ContainerType<{
                                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                                data: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    index: import("@chainsafe/ssz").UintBigintType;
                                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                    source: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                    target: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            attestation2: ContainerType<{
                                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                                data: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    index: import("@chainsafe/ssz").UintBigintType;
                                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                    source: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                    target: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>>;
                        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            aggregationBits: import("@chainsafe/ssz").BitListType;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintNumberType;
                                index: import("@chainsafe/ssz").UintNumberType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintNumberType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintNumberType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                            committeeBits: import("@chainsafe/ssz").BitVectorType;
                        }>>;
                        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                            data: ContainerType<{
                                pubkey: import("@chainsafe/ssz").ByteVectorType;
                                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                                amount: import("@chainsafe/ssz").UintNumberType;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>>;
                        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            message: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                        syncAggregate: ContainerType<{
                            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        executionPayload: ContainerType<{
                            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                                index: import("@chainsafe/ssz").UintNumberType;
                                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                                address: import("./utils/executionAddress.js").ExecutionAddressType;
                                amount: import("@chainsafe/ssz").UintBigintType;
                            }>>;
                            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                            parentHash: import("@chainsafe/ssz").ByteVectorType;
                            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                            logsBloom: import("@chainsafe/ssz").ByteVectorType;
                            prevRandao: import("@chainsafe/ssz").ByteVectorType;
                            blockNumber: import("@chainsafe/ssz").UintNumberType;
                            gasLimit: import("@chainsafe/ssz").UintNumberType;
                            gasUsed: import("@chainsafe/ssz").UintNumberType;
                            timestamp: import("@chainsafe/ssz").UintNumberType;
                            extraData: import("@chainsafe/ssz").ByteListType;
                            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                            blockHash: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            message: ContainerType<{
                                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        executionRequests: ContainerType<{
                            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                                pubkey: import("@chainsafe/ssz").ByteVectorType;
                                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                                amount: import("@chainsafe/ssz").UintNumberType;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                                index: import("@chainsafe/ssz").UintBigintType;
                            }>>;
                            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                                validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                                amount: import("@chainsafe/ssz").UintBigintType;
                            }>>;
                            consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                                sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                                targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                            }>>;
                        }>;
                    }>;
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        G1Point: import("@chainsafe/ssz").ByteVectorType;
        G2Point: import("@chainsafe/ssz").ByteVectorType;
        BLSFieldElement: import("@chainsafe/ssz").ByteVectorType;
        KZGCommitment: import("@chainsafe/ssz").ByteVectorType;
        KZGProof: import("@chainsafe/ssz").ByteVectorType;
        Blob: import("@chainsafe/ssz").ByteVectorType;
        Blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        BlindedBlob: import("@chainsafe/ssz").ByteVectorType;
        BlindedBlobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        VersionedHash: import("@chainsafe/ssz").ByteVectorType;
        BlobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        KZGProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        BlobSidecarsByRangeRequest: ContainerType<{
            startSlot: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
        }>;
        BlobIdentifier: ContainerType<{
            blockRoot: import("@chainsafe/ssz").ByteVectorType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>;
        KzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        BlobSidecar: ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            blob: import("@chainsafe/ssz").ByteVectorType;
            kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
            kzgProof: import("@chainsafe/ssz").ByteVectorType;
            signedBlockHeader: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        BlobSidecars: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            blob: import("@chainsafe/ssz").ByteVectorType;
            kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
            kzgProof: import("@chainsafe/ssz").ByteVectorType;
            signedBlockHeader: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>>;
        BlobsBundle: ContainerType<{
            commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        ExecutionPayloadAndBlobsBundle: ContainerType<{
            executionPayload: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blobsBundle: ContainerType<{
                commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
        }>;
        LightClientHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        Withdrawal: ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>;
        BLSToExecutionChange: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        SignedBLSToExecutionChange: ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        BLSToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        HistoricalSummary: ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        HistoricalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        Transaction: import("@chainsafe/ssz").ByteListType;
        Transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        CommonExecutionPayloadType: ContainerType<{
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PowBlock: ContainerType<{
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            totalDifficulty: import("@chainsafe/ssz").UintBigintType;
        }>;
        ValidatorRegistrationV1: ContainerType<{
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedValidatorRegistrationV1: ContainerType<{
            message: ContainerType<{
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SSEPayloadAttributesCommon: ContainerType<{
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncSubnets: import("@chainsafe/ssz").BitVectorType;
        Metadata: ContainerType<{
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
            syncnets: import("@chainsafe/ssz").BitVectorType;
        }>;
        SyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeMessage: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeContribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ContributionAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedContributionAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                contribution: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                    aggregationBits: import("@chainsafe/ssz").BitVectorType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncAggregatorSelectionData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        SyncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        LightClientUpdatesByRange: ContainerType<{
            startPeriod: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
        }>;
        AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
        BeaconBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockHeaderBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeaderBigint: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Checkpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CheckpointBigint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        DepositMessage: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
        }>;
        DepositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        DepositEvent: ContainerType<{
            depositData: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        Eth1DataOrdered: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Block: ContainerType<{
            timestamp: import("@chainsafe/ssz").UintNumberType;
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
        }>;
        Fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        ForkData: ContainerType<{
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ENRForkID: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
            nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalBatch: ContainerType<{
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        HistoricalBatchRoots: ContainerType<{
            blockRoots: import("@chainsafe/ssz").ByteVectorType;
            stateRoots: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Validator: import("./phase0/validator.js").ValidatorNodeStructType;
        Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        Balances: import("@chainsafe/ssz").ListUintNum64Type;
        RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        JustificationBits: import("@chainsafe/ssz").BitVectorType;
        AttestationData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        AttestationDataBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        PendingAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SigningData: ContainerType<{
            objectRoot: import("@chainsafe/ssz").ByteVectorType;
            domain: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Deposit: ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        ProposerSlashing: ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        VoluntaryExit: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SignedVoluntaryExit: ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
        CommitteeAssignment: ContainerType<{
            validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            committeeIndex: import("@chainsafe/ssz").UintNumberType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>;
        Status: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
            finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
            headRoot: import("@chainsafe/ssz").ByteVectorType;
            headSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        Goodbye: import("@chainsafe/ssz").UintBigintType;
        Ping: import("@chainsafe/ssz").UintBigintType;
        BeaconBlocksByRangeRequest: ContainerType<{
            startSlot: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
            step: import("@chainsafe/ssz").UintNumberType;
        }>;
        BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Genesis: ContainerType<{
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
    fulu: {
        Metadata: ContainerType<{
            custodyGroupCount: import("@chainsafe/ssz").UintNumberType;
            seqNumber: import("@chainsafe/ssz").UintBigintType;
            attnets: import("@chainsafe/ssz").BitVectorType;
            syncnets: import("@chainsafe/ssz").BitVectorType;
        }>;
        Cell: import("@chainsafe/ssz").ByteVectorType;
        DataColumn: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        ExtendedMatrix: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        KzgCommitmentsInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        DataColumnSidecar: ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            column: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            kzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            signedBlockHeader: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgCommitmentsInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        DataColumnSidecars: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            column: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            kzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            signedBlockHeader: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgCommitmentsInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>>;
        MatrixEntry: ContainerType<{
            cell: import("@chainsafe/ssz").ByteVectorType;
            kzgProof: import("@chainsafe/ssz").ByteVectorType;
            columnIndex: import("@chainsafe/ssz").UintNumberType;
            rowIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        DataColumnIdentifier: ContainerType<{
            blockRoot: import("@chainsafe/ssz").ByteVectorType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>;
        DataColumnSidecarsByRootRequest: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            blockRoot: import("@chainsafe/ssz").ByteVectorType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>>;
        DataColumnSidecarsByRangeRequest: ContainerType<{
            startSlot: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
            columns: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        }>;
        AggregationBits: import("@chainsafe/ssz").BitListType;
        CommitteeBits: import("@chainsafe/ssz").BitVectorType;
        AttestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        Attestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
            committeeBits: import("@chainsafe/ssz").BitVectorType;
        }>;
        SingleAttestation: ContainerType<{
            committeeIndex: import("@chainsafe/ssz").UintNumberType;
            attesterIndex: import("@chainsafe/ssz").UintNumberType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        IndexedAttestation: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        IndexedAttestationBigint: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        AttesterSlashing: ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        AggregateAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedAggregateAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                aggregate: ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        DepositRequest: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            index: import("@chainsafe/ssz").UintBigintType;
        }>;
        DepositRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            index: import("@chainsafe/ssz").UintBigintType;
        }>>;
        WithdrawalRequest: ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>;
        WithdrawalRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        ConsolidationRequest: ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ConsolidationRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        ExecutionRequests: ContainerType<{
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
                index: import("@chainsafe/ssz").UintBigintType;
            }>>;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                targetPubkey: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        ExecutionPayloadHeader: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ExecutionPayload: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockBody: ContainerType<{
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionPayload: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        BeaconBlock: ContainerType<{
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionPayload: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("./utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlock: ContainerType<{
            message: ContainerType<{
                body: ContainerType<{
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        committeeBits: import("@chainsafe/ssz").BitVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionPayload: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("./utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    executionRequests: ContainerType<{
                        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                            index: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                    }>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BlindedBeaconBlockBody: ContainerType<{
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionPayloadHeader: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        BlindedBeaconBlock: ContainerType<{
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionPayloadHeader: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBlindedBeaconBlock: ContainerType<{
            message: ContainerType<{
                body: ContainerType<{
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        committeeBits: import("@chainsafe/ssz").BitVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionPayloadHeader: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    executionRequests: ContainerType<{
                        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                            index: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                    }>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BuilderBid: ContainerType<{
            header: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBuilderBid: ContainerType<{
            message: ContainerType<{
                header: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
                value: import("@chainsafe/ssz").UintBigintType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PendingDeposit: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>;
        PendingDeposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>>;
        PendingPartialWithdrawal: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            amount: import("@chainsafe/ssz").UintBigintType;
            withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        PendingPartialWithdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            amount: import("@chainsafe/ssz").UintBigintType;
            withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
        }>>;
        PendingConsolidation: ContainerType<{
            sourceIndex: import("@chainsafe/ssz").UintNumberType;
            targetIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        PendingConsolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceIndex: import("@chainsafe/ssz").UintNumberType;
            targetIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
        BeaconState: ContainerType<{
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
            fork: ContainerType<{
                previousVersion: import("@chainsafe/ssz").ByteVectorType;
                currentVersion: import("@chainsafe/ssz").ByteVectorType;
                epoch: import("@chainsafe/ssz").UintNumberType;
            }>;
            latestBlockHeader: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
            validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
            balances: import("@chainsafe/ssz").ListUintNum64Type;
            randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
            previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            justificationBits: import("@chainsafe/ssz").BitVectorType;
            previousJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentJustifiedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            finalizedCheckpoint: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            latestExecutionPayloadHeader: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
            nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
            historicalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
                stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            depositRequestsStartIndex: import("@chainsafe/ssz").UintBigintType;
            depositBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
            exitBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
            earliestExitEpoch: import("@chainsafe/ssz").UintNumberType;
            consolidationBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
            earliestConsolidationEpoch: import("@chainsafe/ssz").UintNumberType;
            pendingDeposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
                slot: import("@chainsafe/ssz").UintNumberType;
            }>>;
            pendingPartialWithdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                amount: import("@chainsafe/ssz").UintBigintType;
                withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
            }>>;
            pendingConsolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceIndex: import("@chainsafe/ssz").UintNumberType;
                targetIndex: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
        LightClientBootstrap: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        LightClientUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientFinalityUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientOptimisticUpdate: ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        LightClientStore: ContainerType<{
            snapshot: ContainerType<{
                header: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                currentSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                nextSyncCommittee: ContainerType<{
                    pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
                }>;
                nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                finalizedHeader: ContainerType<{
                    beacon: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    execution: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                }>;
                finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signatureSlot: import("@chainsafe/ssz").UintNumberType;
            }>>;
        }>;
        PayloadAttributes: ContainerType<{
            parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            suggestedFeeRecipient: import("./index.js").StringType<string>;
        }>;
        SSEPayloadAttributes: ContainerType<{
            payloadAttributes: ContainerType<{
                parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                suggestedFeeRecipient: import("./index.js").StringType<string>;
            }>;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BlockContents: ContainerType<{
            block: ContainerType<{
                body: ContainerType<{
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        committeeBits: import("@chainsafe/ssz").BitVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionPayload: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("./utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    executionRequests: ContainerType<{
                        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                            index: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                    }>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        SignedBlockContents: ContainerType<{
            signedBlock: ContainerType<{
                message: ContainerType<{
                    body: ContainerType<{
                        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                        eth1Data: ContainerType<{
                            depositRoot: import("@chainsafe/ssz").ByteVectorType;
                            depositCount: import("@chainsafe/ssz").UintNumberType;
                            blockHash: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        graffiti: import("@chainsafe/ssz").ByteVectorType;
                        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            signedHeader1: ContainerType<{
                                message: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signedHeader2: ContainerType<{
                                message: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>>;
                        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            attestation1: ContainerType<{
                                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                                data: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    index: import("@chainsafe/ssz").UintBigintType;
                                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                    source: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                    target: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            attestation2: ContainerType<{
                                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                                data: ContainerType<{
                                    slot: import("@chainsafe/ssz").UintBigintType;
                                    index: import("@chainsafe/ssz").UintBigintType;
                                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                    source: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                    target: ContainerType<{
                                        epoch: import("@chainsafe/ssz").UintBigintType;
                                        root: import("@chainsafe/ssz").ByteVectorType;
                                    }>;
                                }>;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>>;
                        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            aggregationBits: import("@chainsafe/ssz").BitListType;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintNumberType;
                                index: import("@chainsafe/ssz").UintNumberType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintNumberType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintNumberType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                            committeeBits: import("@chainsafe/ssz").BitVectorType;
                        }>>;
                        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                            data: ContainerType<{
                                pubkey: import("@chainsafe/ssz").ByteVectorType;
                                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                                amount: import("@chainsafe/ssz").UintNumberType;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>>;
                        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            message: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                        syncAggregate: ContainerType<{
                            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        executionPayload: ContainerType<{
                            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                                index: import("@chainsafe/ssz").UintNumberType;
                                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                                address: import("./utils/executionAddress.js").ExecutionAddressType;
                                amount: import("@chainsafe/ssz").UintBigintType;
                            }>>;
                            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                            parentHash: import("@chainsafe/ssz").ByteVectorType;
                            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                            logsBloom: import("@chainsafe/ssz").ByteVectorType;
                            prevRandao: import("@chainsafe/ssz").ByteVectorType;
                            blockNumber: import("@chainsafe/ssz").UintNumberType;
                            gasLimit: import("@chainsafe/ssz").UintNumberType;
                            gasUsed: import("@chainsafe/ssz").UintNumberType;
                            timestamp: import("@chainsafe/ssz").UintNumberType;
                            extraData: import("@chainsafe/ssz").ByteListType;
                            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                            blockHash: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            message: ContainerType<{
                                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        executionRequests: ContainerType<{
                            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                                pubkey: import("@chainsafe/ssz").ByteVectorType;
                                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                                amount: import("@chainsafe/ssz").UintNumberType;
                                signature: import("@chainsafe/ssz").ByteVectorType;
                                index: import("@chainsafe/ssz").UintBigintType;
                            }>>;
                            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                                validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                                amount: import("@chainsafe/ssz").UintBigintType;
                            }>>;
                            consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                                sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                                targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                            }>>;
                        }>;
                    }>;
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        G1Point: import("@chainsafe/ssz").ByteVectorType;
        G2Point: import("@chainsafe/ssz").ByteVectorType;
        BLSFieldElement: import("@chainsafe/ssz").ByteVectorType;
        KZGCommitment: import("@chainsafe/ssz").ByteVectorType;
        KZGProof: import("@chainsafe/ssz").ByteVectorType;
        Blob: import("@chainsafe/ssz").ByteVectorType;
        Blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        BlindedBlob: import("@chainsafe/ssz").ByteVectorType;
        BlindedBlobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        VersionedHash: import("@chainsafe/ssz").ByteVectorType;
        BlobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        KZGProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        BlobSidecarsByRangeRequest: ContainerType<{
            startSlot: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
        }>;
        BlobIdentifier: ContainerType<{
            blockRoot: import("@chainsafe/ssz").ByteVectorType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>;
        KzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        BlobSidecar: ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            blob: import("@chainsafe/ssz").ByteVectorType;
            kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
            kzgProof: import("@chainsafe/ssz").ByteVectorType;
            signedBlockHeader: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        BlobSidecars: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            blob: import("@chainsafe/ssz").ByteVectorType;
            kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
            kzgProof: import("@chainsafe/ssz").ByteVectorType;
            signedBlockHeader: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>>;
        BlobsBundle: ContainerType<{
            commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        ExecutionPayloadAndBlobsBundle: ContainerType<{
            executionPayload: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blobsBundle: ContainerType<{
                commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
        }>;
        LightClientHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        Withdrawal: ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>;
        BLSToExecutionChange: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        SignedBLSToExecutionChange: ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        BLSToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        HistoricalSummary: ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        HistoricalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        Transaction: import("@chainsafe/ssz").ByteListType;
        Transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        CommonExecutionPayloadType: ContainerType<{
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        PowBlock: ContainerType<{
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            totalDifficulty: import("@chainsafe/ssz").UintBigintType;
        }>;
        ValidatorRegistrationV1: ContainerType<{
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedValidatorRegistrationV1: ContainerType<{
            message: ContainerType<{
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                pubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SSEPayloadAttributesCommon: ContainerType<{
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            proposalSlot: import("@chainsafe/ssz").UintNumberType;
            parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
            parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncSubnets: import("@chainsafe/ssz").BitVectorType;
        SyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeMessage: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncCommitteeContribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ContributionAndProof: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedContributionAndProof: ContainerType<{
            message: ContainerType<{
                aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
                contribution: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                    aggregationBits: import("@chainsafe/ssz").BitVectorType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                selectionProof: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SyncAggregatorSelectionData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        SyncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        LightClientUpdatesByRange: ContainerType<{
            startPeriod: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
        }>;
        AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
        BeaconBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        BeaconBlockHeaderBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        SignedBeaconBlockHeaderBigint: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Checkpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CheckpointBigint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        DepositMessage: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
        }>;
        DepositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        DepositEvent: ContainerType<{
            depositData: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        Eth1DataOrdered: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
        }>;
        Eth1Block: ContainerType<{
            timestamp: import("@chainsafe/ssz").UintNumberType;
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
        }>;
        Fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        ForkData: ContainerType<{
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        ENRForkID: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
            nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        HistoricalBatch: ContainerType<{
            blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        HistoricalBatchRoots: ContainerType<{
            blockRoots: import("@chainsafe/ssz").ByteVectorType;
            stateRoots: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Validator: import("./phase0/validator.js").ValidatorNodeStructType;
        Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        Balances: import("@chainsafe/ssz").ListUintNum64Type;
        RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        JustificationBits: import("@chainsafe/ssz").BitVectorType;
        AttestationData: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        AttestationDataBigint: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        PendingAttestation: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SigningData: ContainerType<{
            objectRoot: import("@chainsafe/ssz").ByteVectorType;
            domain: import("@chainsafe/ssz").ByteVectorType;
        }>;
        Deposit: ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        ProposerSlashing: ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        VoluntaryExit: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        SignedVoluntaryExit: ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
        CommitteeAssignment: ContainerType<{
            validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            committeeIndex: import("@chainsafe/ssz").UintNumberType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>;
        Status: ContainerType<{
            forkDigest: import("@chainsafe/ssz").ByteVectorType;
            finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
            finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
            headRoot: import("@chainsafe/ssz").ByteVectorType;
            headSlot: import("@chainsafe/ssz").UintNumberType;
        }>;
        Goodbye: import("@chainsafe/ssz").UintBigintType;
        Ping: import("@chainsafe/ssz").UintBigintType;
        BeaconBlocksByRangeRequest: ContainerType<{
            startSlot: import("@chainsafe/ssz").UintNumberType;
            count: import("@chainsafe/ssz").UintNumberType;
            step: import("@chainsafe/ssz").UintNumberType;
        }>;
        BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        Genesis: ContainerType<{
            genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
            genesisTime: import("@chainsafe/ssz").UintNumberType;
            genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
        }>;
    };
};
export declare const phase0: {
    AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
    BeaconBlockHeader: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockHeaderBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeader: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeaderBigint: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Checkpoint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CheckpointBigint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintBigintType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CommitteeBits: import("@chainsafe/ssz").BitListType;
    CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    DepositMessage: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
    }>;
    DepositData: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    DepositEvent: ContainerType<{
        depositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Data: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    Eth1DataOrdered: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Block: ContainerType<{
        timestamp: import("@chainsafe/ssz").UintNumberType;
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
    }>;
    Fork: ContainerType<{
        previousVersion: import("@chainsafe/ssz").ByteVectorType;
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        epoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    ForkData: ContainerType<{
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ENRForkID: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
        nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalBatch: ContainerType<{
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    HistoricalBatchRoots: ContainerType<{
        blockRoots: import("@chainsafe/ssz").ByteVectorType;
        stateRoots: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Validator: import("./phase0/validator.js").ValidatorNodeStructType;
    Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
    Balances: import("@chainsafe/ssz").ListUintNum64Type;
    RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
    JustificationBits: import("@chainsafe/ssz").BitVectorType;
    AttestationData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    AttestationDataBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        index: import("@chainsafe/ssz").UintBigintType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    IndexedAttestation: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    IndexedAttestationBigint: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PendingAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SigningData: ContainerType<{
        objectRoot: import("@chainsafe/ssz").ByteVectorType;
        domain: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Attestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SingleAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    AttesterSlashing: ContainerType<{
        attestation1: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        attestation2: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    Deposit: ContainerType<{
        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        data: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    ProposerSlashing: ContainerType<{
        signedHeader1: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signedHeader2: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    VoluntaryExit: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SignedVoluntaryExit: ContainerType<{
        message: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockBody: ContainerType<{
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    BeaconBlock: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        body: ContainerType<{
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
    }>;
    SignedBeaconBlock: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>>;
    BeaconState: ContainerType<{
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        slot: import("@chainsafe/ssz").UintNumberType;
        fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        latestBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
        validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        balances: import("@chainsafe/ssz").ListUintNum64Type;
        randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        previousEpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
        currentEpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            inclusionDelay: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
        justificationBits: import("@chainsafe/ssz").BitVectorType;
        previousJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        finalizedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    CommitteeAssignment: ContainerType<{
        validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        committeeIndex: import("@chainsafe/ssz").UintNumberType;
        slot: import("@chainsafe/ssz").UintNumberType;
    }>;
    AggregateAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        aggregate: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedAggregateAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Status: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
        finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
        headRoot: import("@chainsafe/ssz").ByteVectorType;
        headSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    Goodbye: import("@chainsafe/ssz").UintBigintType;
    Ping: import("@chainsafe/ssz").UintBigintType;
    Metadata: ContainerType<{
        seqNumber: import("@chainsafe/ssz").UintBigintType;
        attnets: import("@chainsafe/ssz").BitVectorType;
    }>;
    BeaconBlocksByRangeRequest: ContainerType<{
        startSlot: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
        step: import("@chainsafe/ssz").UintNumberType;
    }>;
    BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Genesis: ContainerType<{
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
    }>;
};
export declare const altair: {
    SyncSubnets: import("@chainsafe/ssz").BitVectorType;
    Metadata: ContainerType<{
        seqNumber: import("@chainsafe/ssz").UintBigintType;
        attnets: import("@chainsafe/ssz").BitVectorType;
        syncnets: import("@chainsafe/ssz").BitVectorType;
    }>;
    SyncCommittee: ContainerType<{
        pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeMessage: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeContribution: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        aggregationBits: import("@chainsafe/ssz").BitVectorType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ContributionAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        contribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedContributionAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncAggregatorSelectionData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
    SyncAggregate: ContainerType<{
        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockBody: ContainerType<{
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    BeaconBlock: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        body: ContainerType<{
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
    }>;
    SignedBeaconBlock: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: ContainerType<{
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    BeaconState: ContainerType<{
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        slot: import("@chainsafe/ssz").UintNumberType;
        fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        latestBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
        validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        balances: import("@chainsafe/ssz").ListUintNum64Type;
        randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        justificationBits: import("@chainsafe/ssz").BitVectorType;
        previousJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        finalizedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    LightClientHeader: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    LightClientBootstrap: ContainerType<{
        header: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    LightClientUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientFinalityUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientOptimisticUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientUpdatesByRange: ContainerType<{
        startPeriod: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientStore: ContainerType<{
        snapshot: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>>;
    }>;
    AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
    BeaconBlockHeader: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockHeaderBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeader: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeaderBigint: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Checkpoint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CheckpointBigint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintBigintType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CommitteeBits: import("@chainsafe/ssz").BitListType;
    CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    DepositMessage: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
    }>;
    DepositData: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    DepositEvent: ContainerType<{
        depositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Data: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    Eth1DataOrdered: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Block: ContainerType<{
        timestamp: import("@chainsafe/ssz").UintNumberType;
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
    }>;
    Fork: ContainerType<{
        previousVersion: import("@chainsafe/ssz").ByteVectorType;
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        epoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    ForkData: ContainerType<{
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ENRForkID: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
        nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalBatch: ContainerType<{
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    HistoricalBatchRoots: ContainerType<{
        blockRoots: import("@chainsafe/ssz").ByteVectorType;
        stateRoots: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Validator: import("./phase0/validator.js").ValidatorNodeStructType;
    Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
    Balances: import("@chainsafe/ssz").ListUintNum64Type;
    RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
    JustificationBits: import("@chainsafe/ssz").BitVectorType;
    AttestationData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    AttestationDataBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        index: import("@chainsafe/ssz").UintBigintType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    IndexedAttestation: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    IndexedAttestationBigint: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PendingAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SigningData: ContainerType<{
        objectRoot: import("@chainsafe/ssz").ByteVectorType;
        domain: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Attestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SingleAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    AttesterSlashing: ContainerType<{
        attestation1: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        attestation2: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    Deposit: ContainerType<{
        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        data: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    ProposerSlashing: ContainerType<{
        signedHeader1: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signedHeader2: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    VoluntaryExit: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SignedVoluntaryExit: ContainerType<{
        message: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>>;
    CommitteeAssignment: ContainerType<{
        validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        committeeIndex: import("@chainsafe/ssz").UintNumberType;
        slot: import("@chainsafe/ssz").UintNumberType;
    }>;
    AggregateAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        aggregate: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedAggregateAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Status: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
        finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
        headRoot: import("@chainsafe/ssz").ByteVectorType;
        headSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    Goodbye: import("@chainsafe/ssz").UintBigintType;
    Ping: import("@chainsafe/ssz").UintBigintType;
    BeaconBlocksByRangeRequest: ContainerType<{
        startSlot: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
        step: import("@chainsafe/ssz").UintNumberType;
    }>;
    BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Genesis: ContainerType<{
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
    }>;
};
export declare const bellatrix: {
    Transaction: import("@chainsafe/ssz").ByteListType;
    Transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
    CommonExecutionPayloadType: ContainerType<{
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ExecutionPayload: ContainerType<{
        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ExecutionPayloadHeader: ContainerType<{
        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockBody: ContainerType<{
        executionPayload: ContainerType<{
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    BeaconBlock: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        body: ContainerType<{
            executionPayload: ContainerType<{
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
    }>;
    SignedBeaconBlock: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: ContainerType<{
                executionPayload: ContainerType<{
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PowBlock: ContainerType<{
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        totalDifficulty: import("@chainsafe/ssz").UintBigintType;
    }>;
    BeaconState: ContainerType<{
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        slot: import("@chainsafe/ssz").UintNumberType;
        fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        latestBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
        validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        balances: import("@chainsafe/ssz").ListUintNum64Type;
        randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        justificationBits: import("@chainsafe/ssz").BitVectorType;
        previousJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        finalizedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        latestExecutionPayloadHeader: ContainerType<{
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    BlindedBeaconBlockBody: ContainerType<{
        executionPayloadHeader: ContainerType<{
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    BlindedBeaconBlock: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        body: ContainerType<{
            executionPayloadHeader: ContainerType<{
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
    }>;
    SignedBlindedBeaconBlock: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: ContainerType<{
                executionPayloadHeader: ContainerType<{
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ValidatorRegistrationV1: ContainerType<{
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        pubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedValidatorRegistrationV1: ContainerType<{
        message: ContainerType<{
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BuilderBid: ContainerType<{
        header: ContainerType<{
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        value: import("@chainsafe/ssz").UintBigintType;
        pubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBuilderBid: ContainerType<{
        message: ContainerType<{
            header: ContainerType<{
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PayloadAttributes: ContainerType<{
        timestamp: import("@chainsafe/ssz").UintNumberType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        suggestedFeeRecipient: import("./index.js").StringType<string>;
    }>;
    SSEPayloadAttributesCommon: ContainerType<{
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        proposalSlot: import("@chainsafe/ssz").UintNumberType;
        parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
        parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SSEPayloadAttributes: ContainerType<{
        payloadAttributes: ContainerType<{
            timestamp: import("@chainsafe/ssz").UintNumberType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            suggestedFeeRecipient: import("./index.js").StringType<string>;
        }>;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        proposalSlot: import("@chainsafe/ssz").UintNumberType;
        parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
        parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncSubnets: import("@chainsafe/ssz").BitVectorType;
    Metadata: ContainerType<{
        seqNumber: import("@chainsafe/ssz").UintBigintType;
        attnets: import("@chainsafe/ssz").BitVectorType;
        syncnets: import("@chainsafe/ssz").BitVectorType;
    }>;
    SyncCommittee: ContainerType<{
        pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeMessage: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeContribution: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        aggregationBits: import("@chainsafe/ssz").BitVectorType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ContributionAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        contribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedContributionAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncAggregatorSelectionData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
    SyncAggregate: ContainerType<{
        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    LightClientHeader: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    LightClientBootstrap: ContainerType<{
        header: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    LightClientUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientFinalityUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientOptimisticUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientUpdatesByRange: ContainerType<{
        startPeriod: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientStore: ContainerType<{
        snapshot: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>>;
    }>;
    AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
    BeaconBlockHeader: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockHeaderBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeader: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeaderBigint: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Checkpoint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CheckpointBigint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintBigintType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CommitteeBits: import("@chainsafe/ssz").BitListType;
    CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    DepositMessage: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
    }>;
    DepositData: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    DepositEvent: ContainerType<{
        depositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Data: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    Eth1DataOrdered: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Block: ContainerType<{
        timestamp: import("@chainsafe/ssz").UintNumberType;
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
    }>;
    Fork: ContainerType<{
        previousVersion: import("@chainsafe/ssz").ByteVectorType;
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        epoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    ForkData: ContainerType<{
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ENRForkID: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
        nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalBatch: ContainerType<{
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    HistoricalBatchRoots: ContainerType<{
        blockRoots: import("@chainsafe/ssz").ByteVectorType;
        stateRoots: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Validator: import("./phase0/validator.js").ValidatorNodeStructType;
    Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
    Balances: import("@chainsafe/ssz").ListUintNum64Type;
    RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
    JustificationBits: import("@chainsafe/ssz").BitVectorType;
    AttestationData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    AttestationDataBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        index: import("@chainsafe/ssz").UintBigintType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    IndexedAttestation: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    IndexedAttestationBigint: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PendingAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SigningData: ContainerType<{
        objectRoot: import("@chainsafe/ssz").ByteVectorType;
        domain: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Attestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SingleAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    AttesterSlashing: ContainerType<{
        attestation1: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        attestation2: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    Deposit: ContainerType<{
        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        data: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    ProposerSlashing: ContainerType<{
        signedHeader1: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signedHeader2: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    VoluntaryExit: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SignedVoluntaryExit: ContainerType<{
        message: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>>;
    CommitteeAssignment: ContainerType<{
        validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        committeeIndex: import("@chainsafe/ssz").UintNumberType;
        slot: import("@chainsafe/ssz").UintNumberType;
    }>;
    AggregateAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        aggregate: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedAggregateAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Status: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
        finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
        headRoot: import("@chainsafe/ssz").ByteVectorType;
        headSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    Goodbye: import("@chainsafe/ssz").UintBigintType;
    Ping: import("@chainsafe/ssz").UintBigintType;
    BeaconBlocksByRangeRequest: ContainerType<{
        startSlot: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
        step: import("@chainsafe/ssz").UintNumberType;
    }>;
    BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Genesis: ContainerType<{
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
    }>;
};
export declare const capella: {
    Withdrawal: ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        address: import("./utils/executionAddress.js").ExecutionAddressType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>;
    BLSToExecutionChange: ContainerType<{
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
    }>;
    SignedBLSToExecutionChange: ContainerType<{
        message: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        address: import("./utils/executionAddress.js").ExecutionAddressType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>>;
    ExecutionPayload: ContainerType<{
        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ExecutionPayloadHeader: ContainerType<{
        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BLSToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        message: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    BeaconBlockBody: ContainerType<{
        executionPayload: ContainerType<{
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    BeaconBlock: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        body: ContainerType<{
            executionPayload: ContainerType<{
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
    }>;
    SignedBeaconBlock: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            body: ContainerType<{
                executionPayload: ContainerType<{
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("./utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BuilderBid: ContainerType<{
        header: ContainerType<{
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        value: import("@chainsafe/ssz").UintBigintType;
        pubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBuilderBid: ContainerType<{
        message: ContainerType<{
            header: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    HistoricalSummary: ContainerType<{
        blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    HistoricalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    BeaconState: ContainerType<{
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        slot: import("@chainsafe/ssz").UintNumberType;
        fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        latestBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
        validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        balances: import("@chainsafe/ssz").ListUintNum64Type;
        randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        justificationBits: import("@chainsafe/ssz").BitVectorType;
        previousJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        finalizedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        latestExecutionPayloadHeader: ContainerType<{
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
        nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
        historicalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    BlindedBeaconBlockBody: ContainerType<{
        executionPayloadHeader: ContainerType<{
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    BlindedBeaconBlock: ContainerType<{
        body: ContainerType<{
            executionPayloadHeader: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBlindedBeaconBlock: ContainerType<{
        message: ContainerType<{
            body: ContainerType<{
                executionPayloadHeader: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    LightClientHeader: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        execution: ContainerType<{
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    LightClientBootstrap: ContainerType<{
        header: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    LightClientUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientFinalityUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientOptimisticUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientStore: ContainerType<{
        snapshot: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>>;
    }>;
    PayloadAttributes: ContainerType<{
        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        suggestedFeeRecipient: import("./index.js").StringType<string>;
    }>;
    SSEPayloadAttributes: ContainerType<{
        payloadAttributes: ContainerType<{
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            suggestedFeeRecipient: import("./index.js").StringType<string>;
        }>;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        proposalSlot: import("@chainsafe/ssz").UintNumberType;
        parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
        parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Transaction: import("@chainsafe/ssz").ByteListType;
    Transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
    CommonExecutionPayloadType: ContainerType<{
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PowBlock: ContainerType<{
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        totalDifficulty: import("@chainsafe/ssz").UintBigintType;
    }>;
    ValidatorRegistrationV1: ContainerType<{
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        pubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedValidatorRegistrationV1: ContainerType<{
        message: ContainerType<{
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SSEPayloadAttributesCommon: ContainerType<{
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        proposalSlot: import("@chainsafe/ssz").UintNumberType;
        parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
        parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncSubnets: import("@chainsafe/ssz").BitVectorType;
    Metadata: ContainerType<{
        seqNumber: import("@chainsafe/ssz").UintBigintType;
        attnets: import("@chainsafe/ssz").BitVectorType;
        syncnets: import("@chainsafe/ssz").BitVectorType;
    }>;
    SyncCommittee: ContainerType<{
        pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeMessage: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeContribution: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        aggregationBits: import("@chainsafe/ssz").BitVectorType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ContributionAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        contribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedContributionAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncAggregatorSelectionData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
    SyncAggregate: ContainerType<{
        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    LightClientUpdatesByRange: ContainerType<{
        startPeriod: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
    }>;
    AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
    BeaconBlockHeader: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockHeaderBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeader: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeaderBigint: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Checkpoint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CheckpointBigint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintBigintType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CommitteeBits: import("@chainsafe/ssz").BitListType;
    CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    DepositMessage: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
    }>;
    DepositData: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    DepositEvent: ContainerType<{
        depositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Data: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    Eth1DataOrdered: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Block: ContainerType<{
        timestamp: import("@chainsafe/ssz").UintNumberType;
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
    }>;
    Fork: ContainerType<{
        previousVersion: import("@chainsafe/ssz").ByteVectorType;
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        epoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    ForkData: ContainerType<{
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ENRForkID: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
        nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalBatch: ContainerType<{
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    HistoricalBatchRoots: ContainerType<{
        blockRoots: import("@chainsafe/ssz").ByteVectorType;
        stateRoots: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Validator: import("./phase0/validator.js").ValidatorNodeStructType;
    Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
    Balances: import("@chainsafe/ssz").ListUintNum64Type;
    RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
    JustificationBits: import("@chainsafe/ssz").BitVectorType;
    AttestationData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    AttestationDataBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        index: import("@chainsafe/ssz").UintBigintType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    IndexedAttestation: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    IndexedAttestationBigint: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PendingAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SigningData: ContainerType<{
        objectRoot: import("@chainsafe/ssz").ByteVectorType;
        domain: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Attestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SingleAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    AttesterSlashing: ContainerType<{
        attestation1: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        attestation2: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    Deposit: ContainerType<{
        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        data: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    ProposerSlashing: ContainerType<{
        signedHeader1: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signedHeader2: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    VoluntaryExit: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SignedVoluntaryExit: ContainerType<{
        message: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>>;
    CommitteeAssignment: ContainerType<{
        validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        committeeIndex: import("@chainsafe/ssz").UintNumberType;
        slot: import("@chainsafe/ssz").UintNumberType;
    }>;
    AggregateAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        aggregate: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedAggregateAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Status: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
        finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
        headRoot: import("@chainsafe/ssz").ByteVectorType;
        headSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    Goodbye: import("@chainsafe/ssz").UintBigintType;
    Ping: import("@chainsafe/ssz").UintBigintType;
    BeaconBlocksByRangeRequest: ContainerType<{
        startSlot: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
        step: import("@chainsafe/ssz").UintNumberType;
    }>;
    BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Genesis: ContainerType<{
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
    }>;
};
export declare const deneb: {
    G1Point: import("@chainsafe/ssz").ByteVectorType;
    G2Point: import("@chainsafe/ssz").ByteVectorType;
    BLSFieldElement: import("@chainsafe/ssz").ByteVectorType;
    KZGCommitment: import("@chainsafe/ssz").ByteVectorType;
    KZGProof: import("@chainsafe/ssz").ByteVectorType;
    Blob: import("@chainsafe/ssz").ByteVectorType;
    Blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    BlindedBlob: import("@chainsafe/ssz").ByteVectorType;
    BlindedBlobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    VersionedHash: import("@chainsafe/ssz").ByteVectorType;
    BlobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    KZGProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    BlobSidecarsByRangeRequest: ContainerType<{
        startSlot: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
    }>;
    BlobIdentifier: ContainerType<{
        blockRoot: import("@chainsafe/ssz").ByteVectorType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>;
    ExecutionPayload: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ExecutionPayloadHeader: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockBody: ContainerType<{
        executionPayload: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    BeaconBlock: ContainerType<{
        body: ContainerType<{
            executionPayload: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlock: ContainerType<{
        message: ContainerType<{
            body: ContainerType<{
                executionPayload: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("./utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    KzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    BlobSidecar: ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        blob: import("@chainsafe/ssz").ByteVectorType;
        kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
        kzgProof: import("@chainsafe/ssz").ByteVectorType;
        signedBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    BlobSidecars: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        blob: import("@chainsafe/ssz").ByteVectorType;
        kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
        kzgProof: import("@chainsafe/ssz").ByteVectorType;
        signedBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>>;
    BlobsBundle: ContainerType<{
        commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    BlindedBeaconBlockBody: ContainerType<{
        executionPayloadHeader: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    BlindedBeaconBlock: ContainerType<{
        body: ContainerType<{
            executionPayloadHeader: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBlindedBeaconBlock: ContainerType<{
        message: ContainerType<{
            body: ContainerType<{
                executionPayloadHeader: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BuilderBid: ContainerType<{
        header: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        value: import("@chainsafe/ssz").UintBigintType;
        pubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBuilderBid: ContainerType<{
        message: ContainerType<{
            header: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ExecutionPayloadAndBlobsBundle: ContainerType<{
        executionPayload: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blobsBundle: ContainerType<{
            commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
    }>;
    BeaconState: ContainerType<{
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        slot: import("@chainsafe/ssz").UintNumberType;
        fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        latestBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
        validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        balances: import("@chainsafe/ssz").ListUintNum64Type;
        randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        justificationBits: import("@chainsafe/ssz").BitVectorType;
        previousJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        finalizedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        latestExecutionPayloadHeader: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
        nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
        historicalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    LightClientHeader: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        execution: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    LightClientBootstrap: ContainerType<{
        header: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    LightClientUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientFinalityUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientOptimisticUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientStore: ContainerType<{
        snapshot: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>>;
    }>;
    PayloadAttributes: ContainerType<{
        parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        suggestedFeeRecipient: import("./index.js").StringType<string>;
    }>;
    SSEPayloadAttributes: ContainerType<{
        payloadAttributes: ContainerType<{
            parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            suggestedFeeRecipient: import("./index.js").StringType<string>;
        }>;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        proposalSlot: import("@chainsafe/ssz").UintNumberType;
        parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
        parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BlockContents: ContainerType<{
        block: ContainerType<{
            body: ContainerType<{
                executionPayload: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("./utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    SignedBlockContents: ContainerType<{
        signedBlock: ContainerType<{
            message: ContainerType<{
                body: ContainerType<{
                    executionPayload: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("./utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    Withdrawal: ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        address: import("./utils/executionAddress.js").ExecutionAddressType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>;
    BLSToExecutionChange: ContainerType<{
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
    }>;
    SignedBLSToExecutionChange: ContainerType<{
        message: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        address: import("./utils/executionAddress.js").ExecutionAddressType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>>;
    BLSToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        message: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    HistoricalSummary: ContainerType<{
        blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    HistoricalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    Transaction: import("@chainsafe/ssz").ByteListType;
    Transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
    CommonExecutionPayloadType: ContainerType<{
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PowBlock: ContainerType<{
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        totalDifficulty: import("@chainsafe/ssz").UintBigintType;
    }>;
    ValidatorRegistrationV1: ContainerType<{
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        pubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedValidatorRegistrationV1: ContainerType<{
        message: ContainerType<{
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SSEPayloadAttributesCommon: ContainerType<{
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        proposalSlot: import("@chainsafe/ssz").UintNumberType;
        parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
        parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncSubnets: import("@chainsafe/ssz").BitVectorType;
    Metadata: ContainerType<{
        seqNumber: import("@chainsafe/ssz").UintBigintType;
        attnets: import("@chainsafe/ssz").BitVectorType;
        syncnets: import("@chainsafe/ssz").BitVectorType;
    }>;
    SyncCommittee: ContainerType<{
        pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeMessage: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeContribution: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        aggregationBits: import("@chainsafe/ssz").BitVectorType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ContributionAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        contribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedContributionAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncAggregatorSelectionData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
    SyncAggregate: ContainerType<{
        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    LightClientUpdatesByRange: ContainerType<{
        startPeriod: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
    }>;
    AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
    BeaconBlockHeader: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockHeaderBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeader: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeaderBigint: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Checkpoint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CheckpointBigint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintBigintType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CommitteeBits: import("@chainsafe/ssz").BitListType;
    CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    DepositMessage: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
    }>;
    DepositData: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    DepositEvent: ContainerType<{
        depositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Data: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    Eth1DataOrdered: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Block: ContainerType<{
        timestamp: import("@chainsafe/ssz").UintNumberType;
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
    }>;
    Fork: ContainerType<{
        previousVersion: import("@chainsafe/ssz").ByteVectorType;
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        epoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    ForkData: ContainerType<{
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ENRForkID: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
        nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalBatch: ContainerType<{
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    HistoricalBatchRoots: ContainerType<{
        blockRoots: import("@chainsafe/ssz").ByteVectorType;
        stateRoots: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Validator: import("./phase0/validator.js").ValidatorNodeStructType;
    Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
    Balances: import("@chainsafe/ssz").ListUintNum64Type;
    RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
    JustificationBits: import("@chainsafe/ssz").BitVectorType;
    AttestationData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    AttestationDataBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        index: import("@chainsafe/ssz").UintBigintType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    IndexedAttestation: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    IndexedAttestationBigint: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PendingAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SigningData: ContainerType<{
        objectRoot: import("@chainsafe/ssz").ByteVectorType;
        domain: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Attestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SingleAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    AttesterSlashing: ContainerType<{
        attestation1: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        attestation2: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    Deposit: ContainerType<{
        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        data: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    ProposerSlashing: ContainerType<{
        signedHeader1: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signedHeader2: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    VoluntaryExit: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SignedVoluntaryExit: ContainerType<{
        message: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>>;
    CommitteeAssignment: ContainerType<{
        validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        committeeIndex: import("@chainsafe/ssz").UintNumberType;
        slot: import("@chainsafe/ssz").UintNumberType;
    }>;
    AggregateAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        aggregate: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedAggregateAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Status: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
        finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
        headRoot: import("@chainsafe/ssz").ByteVectorType;
        headSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    Goodbye: import("@chainsafe/ssz").UintBigintType;
    Ping: import("@chainsafe/ssz").UintBigintType;
    BeaconBlocksByRangeRequest: ContainerType<{
        startSlot: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
        step: import("@chainsafe/ssz").UintNumberType;
    }>;
    BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Genesis: ContainerType<{
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
    }>;
};
export declare const electra: {
    AggregationBits: import("@chainsafe/ssz").BitListType;
    CommitteeBits: import("@chainsafe/ssz").BitVectorType;
    AttestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    Attestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
        committeeBits: import("@chainsafe/ssz").BitVectorType;
    }>;
    SingleAttestation: ContainerType<{
        committeeIndex: import("@chainsafe/ssz").UintNumberType;
        attesterIndex: import("@chainsafe/ssz").UintNumberType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    IndexedAttestation: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    IndexedAttestationBigint: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    AttesterSlashing: ContainerType<{
        attestation1: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        attestation2: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    AggregateAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        aggregate: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
            committeeBits: import("@chainsafe/ssz").BitVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedAggregateAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    DepositRequest: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
        index: import("@chainsafe/ssz").UintBigintType;
    }>;
    DepositRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
        index: import("@chainsafe/ssz").UintBigintType;
    }>>;
    WithdrawalRequest: ContainerType<{
        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>;
    WithdrawalRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>>;
    ConsolidationRequest: ContainerType<{
        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ConsolidationRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    ExecutionRequests: ContainerType<{
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            index: import("@chainsafe/ssz").UintBigintType;
        }>>;
        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    ExecutionPayloadHeader: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ExecutionPayload: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockBody: ContainerType<{
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
            committeeBits: import("@chainsafe/ssz").BitVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        executionPayload: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        executionRequests: ContainerType<{
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
                index: import("@chainsafe/ssz").UintBigintType;
            }>>;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                targetPubkey: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
    }>;
    BeaconBlock: ContainerType<{
        body: ContainerType<{
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionPayload: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlock: ContainerType<{
        message: ContainerType<{
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionPayload: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("./utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BlindedBeaconBlockBody: ContainerType<{
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
            committeeBits: import("@chainsafe/ssz").BitVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        executionPayloadHeader: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        executionRequests: ContainerType<{
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
                index: import("@chainsafe/ssz").UintBigintType;
            }>>;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                targetPubkey: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
    }>;
    BlindedBeaconBlock: ContainerType<{
        body: ContainerType<{
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionPayloadHeader: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBlindedBeaconBlock: ContainerType<{
        message: ContainerType<{
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionPayloadHeader: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BuilderBid: ContainerType<{
        header: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        executionRequests: ContainerType<{
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
                index: import("@chainsafe/ssz").UintBigintType;
            }>>;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                targetPubkey: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        value: import("@chainsafe/ssz").UintBigintType;
        pubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBuilderBid: ContainerType<{
        message: ContainerType<{
            header: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PendingDeposit: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
        slot: import("@chainsafe/ssz").UintNumberType;
    }>;
    PendingDeposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
        slot: import("@chainsafe/ssz").UintNumberType;
    }>>;
    PendingPartialWithdrawal: ContainerType<{
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        amount: import("@chainsafe/ssz").UintBigintType;
        withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    PendingPartialWithdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        amount: import("@chainsafe/ssz").UintBigintType;
        withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
    }>>;
    PendingConsolidation: ContainerType<{
        sourceIndex: import("@chainsafe/ssz").UintNumberType;
        targetIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    PendingConsolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        sourceIndex: import("@chainsafe/ssz").UintNumberType;
        targetIndex: import("@chainsafe/ssz").UintNumberType;
    }>>;
    BeaconState: ContainerType<{
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        slot: import("@chainsafe/ssz").UintNumberType;
        fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        latestBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
        validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        balances: import("@chainsafe/ssz").ListUintNum64Type;
        randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        justificationBits: import("@chainsafe/ssz").BitVectorType;
        previousJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        finalizedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        latestExecutionPayloadHeader: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
        nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
        historicalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        depositRequestsStartIndex: import("@chainsafe/ssz").UintBigintType;
        depositBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
        exitBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
        earliestExitEpoch: import("@chainsafe/ssz").UintNumberType;
        consolidationBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
        earliestConsolidationEpoch: import("@chainsafe/ssz").UintNumberType;
        pendingDeposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>>;
        pendingPartialWithdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            amount: import("@chainsafe/ssz").UintBigintType;
            withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
        }>>;
        pendingConsolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceIndex: import("@chainsafe/ssz").UintNumberType;
            targetIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
    }>;
    LightClientBootstrap: ContainerType<{
        header: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    LightClientUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientFinalityUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientOptimisticUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientStore: ContainerType<{
        snapshot: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>>;
    }>;
    PayloadAttributes: ContainerType<{
        parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        suggestedFeeRecipient: import("./index.js").StringType<string>;
    }>;
    SSEPayloadAttributes: ContainerType<{
        payloadAttributes: ContainerType<{
            parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            suggestedFeeRecipient: import("./index.js").StringType<string>;
        }>;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        proposalSlot: import("@chainsafe/ssz").UintNumberType;
        parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
        parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BlockContents: ContainerType<{
        block: ContainerType<{
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionPayload: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("./utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    SignedBlockContents: ContainerType<{
        signedBlock: ContainerType<{
            message: ContainerType<{
                body: ContainerType<{
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        committeeBits: import("@chainsafe/ssz").BitVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionPayload: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("./utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    executionRequests: ContainerType<{
                        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                            index: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                    }>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    G1Point: import("@chainsafe/ssz").ByteVectorType;
    G2Point: import("@chainsafe/ssz").ByteVectorType;
    BLSFieldElement: import("@chainsafe/ssz").ByteVectorType;
    KZGCommitment: import("@chainsafe/ssz").ByteVectorType;
    KZGProof: import("@chainsafe/ssz").ByteVectorType;
    Blob: import("@chainsafe/ssz").ByteVectorType;
    Blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    BlindedBlob: import("@chainsafe/ssz").ByteVectorType;
    BlindedBlobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    VersionedHash: import("@chainsafe/ssz").ByteVectorType;
    BlobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    KZGProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    BlobSidecarsByRangeRequest: ContainerType<{
        startSlot: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
    }>;
    BlobIdentifier: ContainerType<{
        blockRoot: import("@chainsafe/ssz").ByteVectorType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>;
    KzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    BlobSidecar: ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        blob: import("@chainsafe/ssz").ByteVectorType;
        kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
        kzgProof: import("@chainsafe/ssz").ByteVectorType;
        signedBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    BlobSidecars: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        blob: import("@chainsafe/ssz").ByteVectorType;
        kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
        kzgProof: import("@chainsafe/ssz").ByteVectorType;
        signedBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>>;
    BlobsBundle: ContainerType<{
        commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    ExecutionPayloadAndBlobsBundle: ContainerType<{
        executionPayload: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blobsBundle: ContainerType<{
            commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
    }>;
    LightClientHeader: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        execution: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    Withdrawal: ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        address: import("./utils/executionAddress.js").ExecutionAddressType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>;
    BLSToExecutionChange: ContainerType<{
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
    }>;
    SignedBLSToExecutionChange: ContainerType<{
        message: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        address: import("./utils/executionAddress.js").ExecutionAddressType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>>;
    BLSToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        message: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    HistoricalSummary: ContainerType<{
        blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    HistoricalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    Transaction: import("@chainsafe/ssz").ByteListType;
    Transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
    CommonExecutionPayloadType: ContainerType<{
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PowBlock: ContainerType<{
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        totalDifficulty: import("@chainsafe/ssz").UintBigintType;
    }>;
    ValidatorRegistrationV1: ContainerType<{
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        pubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedValidatorRegistrationV1: ContainerType<{
        message: ContainerType<{
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SSEPayloadAttributesCommon: ContainerType<{
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        proposalSlot: import("@chainsafe/ssz").UintNumberType;
        parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
        parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncSubnets: import("@chainsafe/ssz").BitVectorType;
    Metadata: ContainerType<{
        seqNumber: import("@chainsafe/ssz").UintBigintType;
        attnets: import("@chainsafe/ssz").BitVectorType;
        syncnets: import("@chainsafe/ssz").BitVectorType;
    }>;
    SyncCommittee: ContainerType<{
        pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeMessage: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeContribution: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        aggregationBits: import("@chainsafe/ssz").BitVectorType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ContributionAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        contribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedContributionAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncAggregatorSelectionData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
    SyncAggregate: ContainerType<{
        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    LightClientUpdatesByRange: ContainerType<{
        startPeriod: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
    }>;
    AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
    BeaconBlockHeader: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockHeaderBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeader: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeaderBigint: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Checkpoint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CheckpointBigint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintBigintType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    DepositMessage: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
    }>;
    DepositData: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    DepositEvent: ContainerType<{
        depositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Data: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    Eth1DataOrdered: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Block: ContainerType<{
        timestamp: import("@chainsafe/ssz").UintNumberType;
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
    }>;
    Fork: ContainerType<{
        previousVersion: import("@chainsafe/ssz").ByteVectorType;
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        epoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    ForkData: ContainerType<{
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ENRForkID: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
        nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalBatch: ContainerType<{
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    HistoricalBatchRoots: ContainerType<{
        blockRoots: import("@chainsafe/ssz").ByteVectorType;
        stateRoots: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Validator: import("./phase0/validator.js").ValidatorNodeStructType;
    Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
    Balances: import("@chainsafe/ssz").ListUintNum64Type;
    RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
    JustificationBits: import("@chainsafe/ssz").BitVectorType;
    AttestationData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    AttestationDataBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        index: import("@chainsafe/ssz").UintBigintType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    PendingAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SigningData: ContainerType<{
        objectRoot: import("@chainsafe/ssz").ByteVectorType;
        domain: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Deposit: ContainerType<{
        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        data: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    ProposerSlashing: ContainerType<{
        signedHeader1: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signedHeader2: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    VoluntaryExit: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SignedVoluntaryExit: ContainerType<{
        message: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>>;
    CommitteeAssignment: ContainerType<{
        validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        committeeIndex: import("@chainsafe/ssz").UintNumberType;
        slot: import("@chainsafe/ssz").UintNumberType;
    }>;
    Status: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
        finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
        headRoot: import("@chainsafe/ssz").ByteVectorType;
        headSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    Goodbye: import("@chainsafe/ssz").UintBigintType;
    Ping: import("@chainsafe/ssz").UintBigintType;
    BeaconBlocksByRangeRequest: ContainerType<{
        startSlot: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
        step: import("@chainsafe/ssz").UintNumberType;
    }>;
    BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Genesis: ContainerType<{
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
    }>;
};
export declare const fulu: {
    Metadata: ContainerType<{
        custodyGroupCount: import("@chainsafe/ssz").UintNumberType;
        seqNumber: import("@chainsafe/ssz").UintBigintType;
        attnets: import("@chainsafe/ssz").BitVectorType;
        syncnets: import("@chainsafe/ssz").BitVectorType;
    }>;
    Cell: import("@chainsafe/ssz").ByteVectorType;
    DataColumn: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    ExtendedMatrix: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    KzgCommitmentsInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    DataColumnSidecar: ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        column: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        kzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        signedBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgCommitmentsInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    DataColumnSidecars: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        column: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        kzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        signedBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgCommitmentsInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>>;
    MatrixEntry: ContainerType<{
        cell: import("@chainsafe/ssz").ByteVectorType;
        kzgProof: import("@chainsafe/ssz").ByteVectorType;
        columnIndex: import("@chainsafe/ssz").UintNumberType;
        rowIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    DataColumnIdentifier: ContainerType<{
        blockRoot: import("@chainsafe/ssz").ByteVectorType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>;
    DataColumnSidecarsByRootRequest: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        blockRoot: import("@chainsafe/ssz").ByteVectorType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>>;
    DataColumnSidecarsByRangeRequest: ContainerType<{
        startSlot: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
        columns: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    }>;
    AggregationBits: import("@chainsafe/ssz").BitListType;
    CommitteeBits: import("@chainsafe/ssz").BitVectorType;
    AttestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    Attestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
        committeeBits: import("@chainsafe/ssz").BitVectorType;
    }>;
    SingleAttestation: ContainerType<{
        committeeIndex: import("@chainsafe/ssz").UintNumberType;
        attesterIndex: import("@chainsafe/ssz").UintNumberType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    IndexedAttestation: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    IndexedAttestationBigint: ContainerType<{
        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            index: import("@chainsafe/ssz").UintBigintType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintBigintType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    AttesterSlashing: ContainerType<{
        attestation1: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        attestation2: ContainerType<{
            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                index: import("@chainsafe/ssz").UintBigintType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintBigintType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    AggregateAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        aggregate: ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
            committeeBits: import("@chainsafe/ssz").BitVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedAggregateAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            aggregate: ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    DepositRequest: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
        index: import("@chainsafe/ssz").UintBigintType;
    }>;
    DepositRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
        index: import("@chainsafe/ssz").UintBigintType;
    }>>;
    WithdrawalRequest: ContainerType<{
        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>;
    WithdrawalRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>>;
    ConsolidationRequest: ContainerType<{
        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ConsolidationRequests: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    ExecutionRequests: ContainerType<{
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            index: import("@chainsafe/ssz").UintBigintType;
        }>>;
        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
        }>>;
    }>;
    ExecutionPayloadHeader: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
        transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ExecutionPayload: ContainerType<{
        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockBody: ContainerType<{
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
            committeeBits: import("@chainsafe/ssz").BitVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        executionPayload: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        executionRequests: ContainerType<{
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
                index: import("@chainsafe/ssz").UintBigintType;
            }>>;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                targetPubkey: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
    }>;
    BeaconBlock: ContainerType<{
        body: ContainerType<{
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionPayload: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    index: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    address: import("./utils/executionAddress.js").ExecutionAddressType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlock: ContainerType<{
        message: ContainerType<{
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionPayload: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("./utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BlindedBeaconBlockBody: ContainerType<{
        randaoReveal: import("@chainsafe/ssz").ByteVectorType;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        graffiti: import("@chainsafe/ssz").ByteVectorType;
        proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            signedHeader1: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signedHeader2: ContainerType<{
                message: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestation1: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            attestation2: ContainerType<{
                attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintBigintType;
                    index: import("@chainsafe/ssz").UintBigintType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintBigintType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            aggregationBits: import("@chainsafe/ssz").BitListType;
            data: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                index: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                source: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
                target: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    root: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
            committeeBits: import("@chainsafe/ssz").BitVectorType;
        }>>;
        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            data: ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>>;
        voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        executionPayloadHeader: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            message: ContainerType<{
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        executionRequests: ContainerType<{
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
                index: import("@chainsafe/ssz").UintBigintType;
            }>>;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                targetPubkey: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
    }>;
    BlindedBeaconBlock: ContainerType<{
        body: ContainerType<{
            randaoReveal: import("@chainsafe/ssz").ByteVectorType;
            eth1Data: ContainerType<{
                depositRoot: import("@chainsafe/ssz").ByteVectorType;
                depositCount: import("@chainsafe/ssz").UintNumberType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            graffiti: import("@chainsafe/ssz").ByteVectorType;
            proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                signedHeader1: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                signedHeader2: ContainerType<{
                    message: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        proposerIndex: import("@chainsafe/ssz").UintNumberType;
                        parentRoot: import("@chainsafe/ssz").ByteVectorType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                attestation1: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                attestation2: ContainerType<{
                    attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintBigintType;
                        index: import("@chainsafe/ssz").UintBigintType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintBigintType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                aggregationBits: import("@chainsafe/ssz").BitListType;
                data: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    index: import("@chainsafe/ssz").UintNumberType;
                    beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                    source: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    target: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        root: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
                committeeBits: import("@chainsafe/ssz").BitVectorType;
            }>>;
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                data: ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>;
            }>>;
            voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    epoch: import("@chainsafe/ssz").UintNumberType;
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionPayloadHeader: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                message: ContainerType<{
                    validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                    toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                }>;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
        }>;
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBlindedBeaconBlock: ContainerType<{
        message: ContainerType<{
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionPayloadHeader: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BuilderBid: ContainerType<{
        header: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        executionRequests: ContainerType<{
            deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                pubkey: import("@chainsafe/ssz").ByteVectorType;
                withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintNumberType;
                signature: import("@chainsafe/ssz").ByteVectorType;
                index: import("@chainsafe/ssz").UintBigintType;
            }>>;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                targetPubkey: import("@chainsafe/ssz").ByteVectorType;
            }>>;
        }>;
        value: import("@chainsafe/ssz").UintBigintType;
        pubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBuilderBid: ContainerType<{
        message: ContainerType<{
            header: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            executionRequests: ContainerType<{
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    pubkey: import("@chainsafe/ssz").ByteVectorType;
                    withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintNumberType;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    index: import("@chainsafe/ssz").UintBigintType;
                }>>;
                withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                    amount: import("@chainsafe/ssz").UintBigintType;
                }>>;
                consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                    targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                }>>;
            }>;
            value: import("@chainsafe/ssz").UintBigintType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PendingDeposit: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
        slot: import("@chainsafe/ssz").UintNumberType;
    }>;
    PendingDeposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
        slot: import("@chainsafe/ssz").UintNumberType;
    }>>;
    PendingPartialWithdrawal: ContainerType<{
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        amount: import("@chainsafe/ssz").UintBigintType;
        withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    PendingPartialWithdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        amount: import("@chainsafe/ssz").UintBigintType;
        withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
    }>>;
    PendingConsolidation: ContainerType<{
        sourceIndex: import("@chainsafe/ssz").UintNumberType;
        targetIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    PendingConsolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        sourceIndex: import("@chainsafe/ssz").UintNumberType;
        targetIndex: import("@chainsafe/ssz").UintNumberType;
    }>>;
    BeaconState: ContainerType<{
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        slot: import("@chainsafe/ssz").UintNumberType;
        fork: ContainerType<{
            previousVersion: import("@chainsafe/ssz").ByteVectorType;
            currentVersion: import("@chainsafe/ssz").ByteVectorType;
            epoch: import("@chainsafe/ssz").UintNumberType;
        }>;
        latestBlockHeader: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        historicalRoots: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        eth1Data: ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            depositRoot: import("@chainsafe/ssz").ByteVectorType;
            depositCount: import("@chainsafe/ssz").UintNumberType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        eth1DepositIndex: import("@chainsafe/ssz").UintNumberType;
        validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
        balances: import("@chainsafe/ssz").ListUintNum64Type;
        randaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
        previousEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentEpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        justificationBits: import("@chainsafe/ssz").BitVectorType;
        previousJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentJustifiedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        finalizedCheckpoint: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        inactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        latestExecutionPayloadHeader: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextWithdrawalIndex: import("@chainsafe/ssz").UintNumberType;
        nextWithdrawalValidatorIndex: import("@chainsafe/ssz").UintNumberType;
        historicalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
            stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        }>>;
        depositRequestsStartIndex: import("@chainsafe/ssz").UintBigintType;
        depositBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
        exitBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
        earliestExitEpoch: import("@chainsafe/ssz").UintNumberType;
        consolidationBalanceToConsume: import("@chainsafe/ssz").UintBigintType;
        earliestConsolidationEpoch: import("@chainsafe/ssz").UintNumberType;
        pendingDeposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
            slot: import("@chainsafe/ssz").UintNumberType;
        }>>;
        pendingPartialWithdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            amount: import("@chainsafe/ssz").UintBigintType;
            withdrawableEpoch: import("@chainsafe/ssz").UintNumberType;
        }>>;
        pendingConsolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            sourceIndex: import("@chainsafe/ssz").UintNumberType;
            targetIndex: import("@chainsafe/ssz").UintNumberType;
        }>>;
    }>;
    LightClientBootstrap: ContainerType<{
        header: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        currentSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    LightClientUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        nextSyncCommittee: ContainerType<{
            pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientFinalityUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalizedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientOptimisticUpdate: ContainerType<{
        attestedHeader: ContainerType<{
            beacon: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            execution: ContainerType<{
                blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                parentHash: import("@chainsafe/ssz").ByteVectorType;
                feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                logsBloom: import("@chainsafe/ssz").ByteVectorType;
                prevRandao: import("@chainsafe/ssz").ByteVectorType;
                blockNumber: import("@chainsafe/ssz").UintNumberType;
                gasLimit: import("@chainsafe/ssz").UintNumberType;
                gasUsed: import("@chainsafe/ssz").UintNumberType;
                timestamp: import("@chainsafe/ssz").UintNumberType;
                extraData: import("@chainsafe/ssz").ByteListType;
                baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                blockHash: import("@chainsafe/ssz").ByteVectorType;
            }>;
            executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        syncAggregate: ContainerType<{
            syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
            syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signatureSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    LightClientStore: ContainerType<{
        snapshot: ContainerType<{
            header: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            currentSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            currentSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
        validUpdates: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            attestedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            nextSyncCommittee: ContainerType<{
                pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
            }>;
            nextSyncCommitteeBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            finalizedHeader: ContainerType<{
                beacon: ContainerType<{
                    slot: import("@chainsafe/ssz").UintNumberType;
                    proposerIndex: import("@chainsafe/ssz").UintNumberType;
                    parentRoot: import("@chainsafe/ssz").ByteVectorType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                }>;
                execution: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
                    transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            }>;
            finalityBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            syncAggregate: ContainerType<{
                syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signatureSlot: import("@chainsafe/ssz").UintNumberType;
        }>>;
    }>;
    PayloadAttributes: ContainerType<{
        parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
            index: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            address: import("./utils/executionAddress.js").ExecutionAddressType;
            amount: import("@chainsafe/ssz").UintBigintType;
        }>>;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        suggestedFeeRecipient: import("./index.js").StringType<string>;
    }>;
    SSEPayloadAttributes: ContainerType<{
        payloadAttributes: ContainerType<{
            parentBeaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            suggestedFeeRecipient: import("./index.js").StringType<string>;
        }>;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        proposalSlot: import("@chainsafe/ssz").UintNumberType;
        parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
        parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BlockContents: ContainerType<{
        block: ContainerType<{
            body: ContainerType<{
                randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                eth1Data: ContainerType<{
                    depositRoot: import("@chainsafe/ssz").ByteVectorType;
                    depositCount: import("@chainsafe/ssz").UintNumberType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                graffiti: import("@chainsafe/ssz").ByteVectorType;
                proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    signedHeader1: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    signedHeader2: ContainerType<{
                        message: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            proposerIndex: import("@chainsafe/ssz").UintNumberType;
                            parentRoot: import("@chainsafe/ssz").ByteVectorType;
                            stateRoot: import("@chainsafe/ssz").ByteVectorType;
                            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    attestation1: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    attestation2: ContainerType<{
                        attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintBigintType;
                            index: import("@chainsafe/ssz").UintBigintType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintBigintType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    aggregationBits: import("@chainsafe/ssz").BitListType;
                    data: ContainerType<{
                        slot: import("@chainsafe/ssz").UintNumberType;
                        index: import("@chainsafe/ssz").UintNumberType;
                        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                        source: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        target: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            root: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                    committeeBits: import("@chainsafe/ssz").BitVectorType;
                }>>;
                deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    data: ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                }>>;
                voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        epoch: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                syncAggregate: ContainerType<{
                    syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                    syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                }>;
                executionPayload: ContainerType<{
                    blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                    excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        index: import("@chainsafe/ssz").UintNumberType;
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        address: import("./utils/executionAddress.js").ExecutionAddressType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                    parentHash: import("@chainsafe/ssz").ByteVectorType;
                    feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                    stateRoot: import("@chainsafe/ssz").ByteVectorType;
                    receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                    logsBloom: import("@chainsafe/ssz").ByteVectorType;
                    prevRandao: import("@chainsafe/ssz").ByteVectorType;
                    blockNumber: import("@chainsafe/ssz").UintNumberType;
                    gasLimit: import("@chainsafe/ssz").UintNumberType;
                    gasUsed: import("@chainsafe/ssz").UintNumberType;
                    timestamp: import("@chainsafe/ssz").UintNumberType;
                    extraData: import("@chainsafe/ssz").ByteListType;
                    baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                    blockHash: import("@chainsafe/ssz").ByteVectorType;
                }>;
                blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                    message: ContainerType<{
                        validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                    }>;
                    signature: import("@chainsafe/ssz").ByteVectorType;
                }>>;
                blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                executionRequests: ContainerType<{
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        pubkey: import("@chainsafe/ssz").ByteVectorType;
                        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintNumberType;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        index: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                        amount: import("@chainsafe/ssz").UintBigintType;
                    }>>;
                    consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                        targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                }>;
            }>;
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    SignedBlockContents: ContainerType<{
        signedBlock: ContainerType<{
            message: ContainerType<{
                body: ContainerType<{
                    randaoReveal: import("@chainsafe/ssz").ByteVectorType;
                    eth1Data: ContainerType<{
                        depositRoot: import("@chainsafe/ssz").ByteVectorType;
                        depositCount: import("@chainsafe/ssz").UintNumberType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    graffiti: import("@chainsafe/ssz").ByteVectorType;
                    proposerSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        signedHeader1: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        signedHeader2: ContainerType<{
                            message: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attesterSlashings: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        attestation1: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                        attestation2: ContainerType<{
                            attestingIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
                            data: ContainerType<{
                                slot: import("@chainsafe/ssz").UintBigintType;
                                index: import("@chainsafe/ssz").UintBigintType;
                                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                                source: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                                target: ContainerType<{
                                    epoch: import("@chainsafe/ssz").UintBigintType;
                                    root: import("@chainsafe/ssz").ByteVectorType;
                                }>;
                            }>;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    attestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        aggregationBits: import("@chainsafe/ssz").BitListType;
                        data: ContainerType<{
                            slot: import("@chainsafe/ssz").UintNumberType;
                            index: import("@chainsafe/ssz").UintNumberType;
                            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                            source: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                            target: ContainerType<{
                                epoch: import("@chainsafe/ssz").UintNumberType;
                                root: import("@chainsafe/ssz").ByteVectorType;
                            }>;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                        committeeBits: import("@chainsafe/ssz").BitVectorType;
                    }>>;
                    deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                        data: ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                        }>;
                    }>>;
                    voluntaryExits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            epoch: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    syncAggregate: ContainerType<{
                        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
                        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    executionPayload: ContainerType<{
                        blobGasUsed: import("@chainsafe/ssz").UintBigintType;
                        excessBlobGas: import("@chainsafe/ssz").UintBigintType;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            index: import("@chainsafe/ssz").UintNumberType;
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            address: import("./utils/executionAddress.js").ExecutionAddressType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
                        parentHash: import("@chainsafe/ssz").ByteVectorType;
                        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
                        stateRoot: import("@chainsafe/ssz").ByteVectorType;
                        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
                        logsBloom: import("@chainsafe/ssz").ByteVectorType;
                        prevRandao: import("@chainsafe/ssz").ByteVectorType;
                        blockNumber: import("@chainsafe/ssz").UintNumberType;
                        gasLimit: import("@chainsafe/ssz").UintNumberType;
                        gasUsed: import("@chainsafe/ssz").UintNumberType;
                        timestamp: import("@chainsafe/ssz").UintNumberType;
                        extraData: import("@chainsafe/ssz").ByteListType;
                        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
                        blockHash: import("@chainsafe/ssz").ByteVectorType;
                    }>;
                    blsToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                        message: ContainerType<{
                            validatorIndex: import("@chainsafe/ssz").UintNumberType;
                            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
                            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                        }>;
                        signature: import("@chainsafe/ssz").ByteVectorType;
                    }>>;
                    blobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
                    executionRequests: ContainerType<{
                        deposits: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            pubkey: import("@chainsafe/ssz").ByteVectorType;
                            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintNumberType;
                            signature: import("@chainsafe/ssz").ByteVectorType;
                            index: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            validatorPubkey: import("@chainsafe/ssz").ByteVectorType;
                            amount: import("@chainsafe/ssz").UintBigintType;
                        }>>;
                        consolidations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                            sourceAddress: import("./utils/executionAddress.js").ExecutionAddressType;
                            sourcePubkey: import("@chainsafe/ssz").ByteVectorType;
                            targetPubkey: import("@chainsafe/ssz").ByteVectorType;
                        }>>;
                    }>;
                }>;
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    G1Point: import("@chainsafe/ssz").ByteVectorType;
    G2Point: import("@chainsafe/ssz").ByteVectorType;
    BLSFieldElement: import("@chainsafe/ssz").ByteVectorType;
    KZGCommitment: import("@chainsafe/ssz").ByteVectorType;
    KZGProof: import("@chainsafe/ssz").ByteVectorType;
    Blob: import("@chainsafe/ssz").ByteVectorType;
    Blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    BlindedBlob: import("@chainsafe/ssz").ByteVectorType;
    BlindedBlobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    VersionedHash: import("@chainsafe/ssz").ByteVectorType;
    BlobKzgCommitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    KZGProofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    BlobSidecarsByRangeRequest: ContainerType<{
        startSlot: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
    }>;
    BlobIdentifier: ContainerType<{
        blockRoot: import("@chainsafe/ssz").ByteVectorType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>;
    KzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    BlobSidecar: ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        blob: import("@chainsafe/ssz").ByteVectorType;
        kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
        kzgProof: import("@chainsafe/ssz").ByteVectorType;
        signedBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    BlobSidecars: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        blob: import("@chainsafe/ssz").ByteVectorType;
        kzgCommitment: import("@chainsafe/ssz").ByteVectorType;
        kzgProof: import("@chainsafe/ssz").ByteVectorType;
        signedBlockHeader: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        kzgCommitmentInclusionProof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>>;
    BlobsBundle: ContainerType<{
        commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    ExecutionPayloadAndBlobsBundle: ContainerType<{
        executionPayload: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
                index: import("@chainsafe/ssz").UintNumberType;
                validatorIndex: import("@chainsafe/ssz").UintNumberType;
                address: import("./utils/executionAddress.js").ExecutionAddressType;
                amount: import("@chainsafe/ssz").UintBigintType;
            }>>;
            transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blobsBundle: ContainerType<{
            commitments: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            proofs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
            blobs: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        }>;
    }>;
    LightClientHeader: ContainerType<{
        beacon: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        execution: ContainerType<{
            blobGasUsed: import("@chainsafe/ssz").UintBigintType;
            excessBlobGas: import("@chainsafe/ssz").UintBigintType;
            withdrawalsRoot: import("@chainsafe/ssz").ByteVectorType;
            transactionsRoot: import("@chainsafe/ssz").ByteVectorType;
            parentHash: import("@chainsafe/ssz").ByteVectorType;
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
            logsBloom: import("@chainsafe/ssz").ByteVectorType;
            prevRandao: import("@chainsafe/ssz").ByteVectorType;
            blockNumber: import("@chainsafe/ssz").UintNumberType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            gasUsed: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            extraData: import("@chainsafe/ssz").ByteListType;
            baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
            blockHash: import("@chainsafe/ssz").ByteVectorType;
        }>;
        executionBranch: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    Withdrawal: ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        address: import("./utils/executionAddress.js").ExecutionAddressType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>;
    BLSToExecutionChange: ContainerType<{
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
        toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
    }>;
    SignedBLSToExecutionChange: ContainerType<{
        message: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Withdrawals: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        index: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        address: import("./utils/executionAddress.js").ExecutionAddressType;
        amount: import("@chainsafe/ssz").UintBigintType;
    }>>;
    BLSToExecutionChanges: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        message: ContainerType<{
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
            fromBlsPubkey: import("@chainsafe/ssz").ByteVectorType;
            toExecutionAddress: import("./utils/executionAddress.js").ExecutionAddressType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    HistoricalSummary: ContainerType<{
        blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    HistoricalSummaries: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        blockSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
        stateSummaryRoot: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    Transaction: import("@chainsafe/ssz").ByteListType;
    Transactions: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteListType>;
    CommonExecutionPayloadType: ContainerType<{
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        receiptsRoot: import("@chainsafe/ssz").ByteVectorType;
        logsBloom: import("@chainsafe/ssz").ByteVectorType;
        prevRandao: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        gasUsed: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        extraData: import("@chainsafe/ssz").ByteListType;
        baseFeePerGas: import("@chainsafe/ssz").UintBigintType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    PowBlock: ContainerType<{
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        parentHash: import("@chainsafe/ssz").ByteVectorType;
        totalDifficulty: import("@chainsafe/ssz").UintBigintType;
    }>;
    ValidatorRegistrationV1: ContainerType<{
        feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
        gasLimit: import("@chainsafe/ssz").UintNumberType;
        timestamp: import("@chainsafe/ssz").UintNumberType;
        pubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedValidatorRegistrationV1: ContainerType<{
        message: ContainerType<{
            feeRecipient: import("./utils/executionAddress.js").ExecutionAddressType;
            gasLimit: import("@chainsafe/ssz").UintNumberType;
            timestamp: import("@chainsafe/ssz").UintNumberType;
            pubkey: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SSEPayloadAttributesCommon: ContainerType<{
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        proposalSlot: import("@chainsafe/ssz").UintNumberType;
        parentBlockNumber: import("@chainsafe/ssz").UintNumberType;
        parentBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        parentBlockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncSubnets: import("@chainsafe/ssz").BitVectorType;
    SyncCommittee: ContainerType<{
        pubkeys: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        aggregatePubkey: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeMessage: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncCommitteeContribution: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
        aggregationBits: import("@chainsafe/ssz").BitVectorType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ContributionAndProof: ContainerType<{
        aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
        contribution: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
            aggregationBits: import("@chainsafe/ssz").BitVectorType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        selectionProof: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedContributionAndProof: ContainerType<{
        message: ContainerType<{
            aggregatorIndex: import("@chainsafe/ssz").UintNumberType;
            contribution: ContainerType<{
                slot: import("@chainsafe/ssz").UintNumberType;
                beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
                subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
                aggregationBits: import("@chainsafe/ssz").BitVectorType;
                signature: import("@chainsafe/ssz").ByteVectorType;
            }>;
            selectionProof: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SyncAggregatorSelectionData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        subcommitteeIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SyncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
    SyncAggregate: ContainerType<{
        syncCommitteeBits: import("@chainsafe/ssz").BitVectorType;
        syncCommitteeSignature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochParticipation: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    InactivityScores: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    LightClientUpdatesByRange: ContainerType<{
        startPeriod: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
    }>;
    AttestationSubnets: import("@chainsafe/ssz").BitVectorType;
    BeaconBlockHeader: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    BeaconBlockHeaderBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
        parentRoot: import("@chainsafe/ssz").ByteVectorType;
        stateRoot: import("@chainsafe/ssz").ByteVectorType;
        bodyRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeader: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    SignedBeaconBlockHeaderBigint: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintBigintType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: import("@chainsafe/ssz").ByteVectorType;
            stateRoot: import("@chainsafe/ssz").ByteVectorType;
            bodyRoot: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Checkpoint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CheckpointBigint: ContainerType<{
        epoch: import("@chainsafe/ssz").UintBigintType;
        root: import("@chainsafe/ssz").ByteVectorType;
    }>;
    CommitteeIndices: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
    DepositMessage: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
    }>;
    DepositData: ContainerType<{
        pubkey: import("@chainsafe/ssz").ByteVectorType;
        withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
        amount: import("@chainsafe/ssz").UintNumberType;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    DepositDataRootList: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    DepositEvent: ContainerType<{
        depositData: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Data: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Eth1DataVotes: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
    }>>;
    Eth1DataOrdered: ContainerType<{
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
        blockHash: import("@chainsafe/ssz").ByteVectorType;
        blockNumber: import("@chainsafe/ssz").UintNumberType;
    }>;
    Eth1Block: ContainerType<{
        timestamp: import("@chainsafe/ssz").UintNumberType;
        depositRoot: import("@chainsafe/ssz").ByteVectorType;
        depositCount: import("@chainsafe/ssz").UintNumberType;
    }>;
    Fork: ContainerType<{
        previousVersion: import("@chainsafe/ssz").ByteVectorType;
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        epoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    ForkData: ContainerType<{
        currentVersion: import("@chainsafe/ssz").ByteVectorType;
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
    }>;
    ENRForkID: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        nextForkVersion: import("@chainsafe/ssz").ByteVectorType;
        nextForkEpoch: import("@chainsafe/ssz").UintNumberType;
    }>;
    HistoricalBlockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalStateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    HistoricalBatch: ContainerType<{
        blockRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        stateRoots: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    }>;
    HistoricalBatchRoots: ContainerType<{
        blockRoots: import("@chainsafe/ssz").ByteVectorType;
        stateRoots: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Validator: import("./phase0/validator.js").ValidatorNodeStructType;
    Validators: import("@chainsafe/ssz").ListCompositeType<import("./phase0/validator.js").ValidatorNodeStructType>;
    Balances: import("@chainsafe/ssz").ListUintNum64Type;
    RandaoMixes: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Slashings: import("@chainsafe/ssz").VectorBasicType<import("@chainsafe/ssz").UintNumberType>;
    JustificationBits: import("@chainsafe/ssz").BitVectorType;
    AttestationData: ContainerType<{
        slot: import("@chainsafe/ssz").UintNumberType;
        index: import("@chainsafe/ssz").UintNumberType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    AttestationDataBigint: ContainerType<{
        slot: import("@chainsafe/ssz").UintBigintType;
        index: import("@chainsafe/ssz").UintBigintType;
        beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
        source: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
        target: ContainerType<{
            epoch: import("@chainsafe/ssz").UintBigintType;
            root: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    PendingAttestation: ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SigningData: ContainerType<{
        objectRoot: import("@chainsafe/ssz").ByteVectorType;
        domain: import("@chainsafe/ssz").ByteVectorType;
    }>;
    Deposit: ContainerType<{
        proof: import("@chainsafe/ssz").VectorCompositeType<import("@chainsafe/ssz").ByteVectorType>;
        data: ContainerType<{
            pubkey: import("@chainsafe/ssz").ByteVectorType;
            withdrawalCredentials: import("@chainsafe/ssz").ByteVectorType;
            amount: import("@chainsafe/ssz").UintNumberType;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    ProposerSlashing: ContainerType<{
        signedHeader1: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
        signedHeader2: ContainerType<{
            message: ContainerType<{
                slot: import("@chainsafe/ssz").UintBigintType;
                proposerIndex: import("@chainsafe/ssz").UintNumberType;
                parentRoot: import("@chainsafe/ssz").ByteVectorType;
                stateRoot: import("@chainsafe/ssz").ByteVectorType;
                bodyRoot: import("@chainsafe/ssz").ByteVectorType;
            }>;
            signature: import("@chainsafe/ssz").ByteVectorType;
        }>;
    }>;
    VoluntaryExit: ContainerType<{
        epoch: import("@chainsafe/ssz").UintNumberType;
        validatorIndex: import("@chainsafe/ssz").UintNumberType;
    }>;
    SignedVoluntaryExit: ContainerType<{
        message: ContainerType<{
            epoch: import("@chainsafe/ssz").UintNumberType;
            validatorIndex: import("@chainsafe/ssz").UintNumberType;
        }>;
        signature: import("@chainsafe/ssz").ByteVectorType;
    }>;
    EpochAttestations: import("@chainsafe/ssz").ListCompositeType<ContainerType<{
        aggregationBits: import("@chainsafe/ssz").BitListType;
        data: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            index: import("@chainsafe/ssz").UintNumberType;
            beaconBlockRoot: import("@chainsafe/ssz").ByteVectorType;
            source: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
            target: ContainerType<{
                epoch: import("@chainsafe/ssz").UintNumberType;
                root: import("@chainsafe/ssz").ByteVectorType;
            }>;
        }>;
        inclusionDelay: import("@chainsafe/ssz").UintNumberType;
        proposerIndex: import("@chainsafe/ssz").UintNumberType;
    }>>;
    CommitteeAssignment: ContainerType<{
        validators: import("@chainsafe/ssz").ListBasicType<import("@chainsafe/ssz").UintNumberType>;
        committeeIndex: import("@chainsafe/ssz").UintNumberType;
        slot: import("@chainsafe/ssz").UintNumberType;
    }>;
    Status: ContainerType<{
        forkDigest: import("@chainsafe/ssz").ByteVectorType;
        finalizedRoot: import("@chainsafe/ssz").ByteVectorType;
        finalizedEpoch: import("@chainsafe/ssz").UintNumberType;
        headRoot: import("@chainsafe/ssz").ByteVectorType;
        headSlot: import("@chainsafe/ssz").UintNumberType;
    }>;
    Goodbye: import("@chainsafe/ssz").UintBigintType;
    Ping: import("@chainsafe/ssz").UintBigintType;
    BeaconBlocksByRangeRequest: ContainerType<{
        startSlot: import("@chainsafe/ssz").UintNumberType;
        count: import("@chainsafe/ssz").UintNumberType;
        step: import("@chainsafe/ssz").UintNumberType;
    }>;
    BeaconBlocksByRootRequest: import("@chainsafe/ssz").ListCompositeType<import("@chainsafe/ssz").ByteVectorType>;
    Genesis: ContainerType<{
        genesisValidatorsRoot: import("@chainsafe/ssz").ByteVectorType;
        genesisTime: import("@chainsafe/ssz").UintNumberType;
        genesisForkVersion: import("@chainsafe/ssz").ByteVectorType;
    }>;
};
/**
 * A type of union of forks must accept as any parameter the UNION of all fork types.
 */
type UnionSSZForksTypeOf<UnionOfForkTypes extends ContainerType<any>> = CompositeType<ValueOf<UnionOfForkTypes>, CompositeView<UnionOfForkTypes>, CompositeViewDU<UnionOfForkTypes>>;
type SSZTypesByFork = {
    [F in keyof typeof typesByFork]: {
        [T in keyof (typeof typesByFork)[F]]: (typeof typesByFork)[F][T];
    };
};
export type SSZTypesFor<F extends ForkName, K extends keyof SSZTypesByFork[F] | void = void> = K extends void ? {
    [K2 in keyof SSZTypesByFork[F]]: UnionSSZForksTypeOf<SSZTypesByFork[F][K2]>;
} : UnionSSZForksTypeOf<SSZTypesByFork[F][Exclude<K, void>]>;
export declare function sszTypesFor<F extends ForkName, K extends keyof SSZTypesByFork[F] | void = void>(fork: F, typeName?: K): SSZTypesFor<F, K>;
//# sourceMappingURL=sszTypes.d.ts.map