import { ByteVectorType, ContainerType, ListBasicType, ListCompositeType, VectorCompositeType } from "@chainsafe/ssz";
export declare const Metadata: ContainerType<{
    custodyGroupCount: import("@chainsafe/ssz").UintNumberType;
    seqNumber: import("@chainsafe/ssz").UintBigintType;
    attnets: import("@chainsafe/ssz").BitVectorType;
    syncnets: import("@chainsafe/ssz").BitVectorType;
}>;
export declare const Cell: ByteVectorType;
export declare const DataColumn: ListCompositeType<ByteVectorType>;
export declare const ExtendedMatrix: ListCompositeType<ByteVectorType>;
export declare const KzgCommitmentsInclusionProof: VectorCompositeType<ByteVectorType>;
export declare const DataColumnSidecar: ContainerType<{
    index: import("@chainsafe/ssz").UintNumberType;
    column: ListCompositeType<ByteVectorType>;
    kzgCommitments: ListCompositeType<ByteVectorType>;
    kzgProofs: ListCompositeType<ByteVectorType>;
    signedBlockHeader: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: ByteVectorType;
            stateRoot: ByteVectorType;
            bodyRoot: ByteVectorType;
        }>;
        signature: ByteVectorType;
    }>;
    kzgCommitmentsInclusionProof: VectorCompositeType<ByteVectorType>;
}>;
export declare const DataColumnSidecars: ListCompositeType<ContainerType<{
    index: import("@chainsafe/ssz").UintNumberType;
    column: ListCompositeType<ByteVectorType>;
    kzgCommitments: ListCompositeType<ByteVectorType>;
    kzgProofs: ListCompositeType<ByteVectorType>;
    signedBlockHeader: ContainerType<{
        message: ContainerType<{
            slot: import("@chainsafe/ssz").UintNumberType;
            proposerIndex: import("@chainsafe/ssz").UintNumberType;
            parentRoot: ByteVectorType;
            stateRoot: ByteVectorType;
            bodyRoot: ByteVectorType;
        }>;
        signature: ByteVectorType;
    }>;
    kzgCommitmentsInclusionProof: VectorCompositeType<ByteVectorType>;
}>>;
export declare const MatrixEntry: ContainerType<{
    cell: ByteVectorType;
    kzgProof: ByteVectorType;
    columnIndex: import("@chainsafe/ssz").UintNumberType;
    rowIndex: import("@chainsafe/ssz").UintNumberType;
}>;
export declare const DataColumnIdentifier: ContainerType<{
    blockRoot: ByteVectorType;
    index: import("@chainsafe/ssz").UintNumberType;
}>;
export declare const DataColumnSidecarsByRootRequest: ListCompositeType<ContainerType<{
    blockRoot: ByteVectorType;
    index: import("@chainsafe/ssz").UintNumberType;
}>>;
export declare const DataColumnSidecarsByRangeRequest: ContainerType<{
    startSlot: import("@chainsafe/ssz").UintNumberType;
    count: import("@chainsafe/ssz").UintNumberType;
    columns: ListBasicType<import("@chainsafe/ssz").UintNumberType>;
}>;
//# sourceMappingURL=sszTypes.d.ts.map