{
  "version": 3,
  "sources": ["../../../src/signature-mpc/dwallet.ts"],
  "sourcesContent": ["// Copyright (c) dWallet Labs, Ltd.\n// SPDX-License-Identifier: BSD-3-Clause-Clear\n\nimport {\n\tserialized_pubkeys_from_decentralized_dkg_output,\n\tverify_signatures,\n} from '@dwallet-network/signature-mpc-wasm';\n\nimport { bcs } from '../bcs/index.js';\nimport { TransactionBlock } from '../builder/index.js';\nimport type { DWalletClient } from '../client/index.js';\nimport type { Keypair } from '../cryptography/index.js';\nimport type { SuiObjectRef } from '../types/index.js';\nimport type { DWallet } from './dwallet_2pc_mpc_ecdsa_k1_module.js';\nimport type { DWalletToTransfer, EncryptedUserShare } from './encrypt_user_share.js';\nimport { fetchOwnedObjectByType } from './utils.js';\n\nconst packageId = '0x3';\nconst dWalletModuleName = 'dwallet';\nconst dWallet2PCMPCECDSAK1ModuleName = 'dwallet_2pc_mpc_ecdsa_k1';\n\nexport enum EncryptionKeyScheme {\n\tPaillier = 0,\n}\n\nexport const getDwalletByObjID = async (\n\tclient: DWalletClient,\n\tdwalletObjID: string,\n): Promise<DWallet | null> => {\n\tconst dwalletObject = await client.getObject({\n\t\tid: dwalletObjID,\n\t\toptions: { showContent: true },\n\t});\n\n\tconst dwalletObjectFields =\n\t\tdwalletObject.data?.content?.dataType === 'moveObject'\n\t\t\t? (dwalletObject.data?.content?.fields as {\n\t\t\t\t\tdwallet_cap_id: string;\n\t\t\t\t\toutput: number[];\n\t\t\t  })\n\t\t\t: null;\n\n\treturn dwalletObjectFields\n\t\t? {\n\t\t\t\tdwalletID: dwalletObjID,\n\t\t\t\tdecentralizedDKGOutput: dwalletObjectFields.output,\n\t\t\t\tdwalletCapID: dwalletObjectFields.dwallet_cap_id,\n\t\t  }\n\t\t: null;\n};\n\nexport function hashToNumber(hash: 'KECCAK256' | 'SHA256') {\n\tif (hash === 'KECCAK256') {\n\t\treturn 0;\n\t} else {\n\t\treturn 1;\n\t}\n}\n\nexport async function approveAndSign(\n\tdwalletCapId: string,\n\tsignMessagesId: string,\n\tmessages: Uint8Array[],\n\tdwalletID: string,\n\thash: 'KECCAK256' | 'SHA256',\n\tkeypair: Keypair,\n\tclient: DWalletClient,\n) {\n\tconst tx = new TransactionBlock();\n\tconst [messageApprovals] = tx.moveCall({\n\t\ttarget: `${packageId}::${dWalletModuleName}::approve_messages`,\n\t\targuments: [\n\t\t\ttx.object(dwalletCapId),\n\t\t\ttx.pure(bcs.vector(bcs.vector(bcs.u8())).serialize(messages)),\n\t\t],\n\t});\n\ttx.moveCall({\n\t\ttarget: `${packageId}::${dWalletModuleName}::sign`,\n\t\ttypeArguments: [\n\t\t\t`${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::SignData`,\n\t\t\t`${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::CreatedSignDataEvent`,\n\t\t],\n\t\targuments: [tx.object(signMessagesId), messageApprovals],\n\t});\n\n\tawait client.signAndExecuteTransactionBlock({\n\t\tsigner: keypair,\n\t\ttransactionBlock: tx,\n\t\toptions: {\n\t\t\tshowEffects: true,\n\t\t},\n\t});\n\tlet signatures = await waitForSignOutput(client);\n\tlet encryptedUserShareObjId = await getEncryptedUserShare(client, keypair, dwalletID);\n\tlet encryptedUserShareObj = await getEncryptedUserShareByObjectID(\n\t\tclient,\n\t\tencryptedUserShareObjId!,\n\t);\n\tlet dwallet = await getDwalletByObjID(client, dwalletID);\n\tlet serializedPubkeys = serialized_pubkeys_from_decentralized_dkg_output(\n\t\tnew Uint8Array(dwallet?.decentralizedDKGOutput!),\n\t);\n\tif (\n\t\t!(await keypair\n\t\t\t.getPublicKey()\n\t\t\t.verify(serializedPubkeys, new Uint8Array(encryptedUserShareObj?.signedDWalletPubKeys!)))\n\t) {\n\t\tthrow new Error('The DWallet public keys has not been signed by the desired Sui address');\n\t}\n\tif (\n\t\t!verify_signatures(\n\t\t\tbcs.vector(bcs.vector(bcs.u8())).serialize(messages).toBytes(),\n\t\t\thashToNumber(hash),\n\t\t\tnew Uint8Array(dwallet?.decentralizedDKGOutput!),\n\t\t\tbcs.vector(bcs.vector(bcs.u8())).serialize(signatures).toBytes(),\n\t\t)\n\t) {\n\t\tthrow new Error('Returned signatures are not valid');\n\t}\n\treturn signatures;\n}\n\nexport interface SignOutputEventData {\n\tsignatures: Uint8Array[];\n\tdwallet_id: string;\n}\n\nexport const waitForSignOutput = async (client: DWalletClient): Promise<Uint8Array[]> => {\n\treturn new Promise((resolve) => {\n\t\tclient.subscribeEvent({\n\t\t\tfilter: {\n\t\t\t\tMoveEventType: `${packageId}::${dWalletModuleName}::SignOutputEvent`,\n\t\t\t},\n\t\t\tonMessage: (event) => {\n\t\t\t\tlet eventData = event?.parsedJson! as SignOutputEventData;\n\t\t\t\tresolve(eventData.signatures);\n\t\t\t},\n\t\t});\n\t});\n};\n\n/**\n * Store the given Paillier encryption key in the blockchain.\n */\nexport const storeEncryptionKey = async (\n\tencryptionKey: Uint8Array,\n\tencryptionKeyScheme: EncryptionKeyScheme,\n\tkeypair: Keypair,\n\tclient: DWalletClient,\n): Promise<SuiObjectRef> => {\n\tlet signedEncryptionKey = await keypair.sign(new Uint8Array(encryptionKey));\n\tconst tx = new TransactionBlock();\n\tlet purePubKey = tx.pure(bcs.vector(bcs.u8()).serialize(encryptionKey));\n\tlet pureSignedPubKey = tx.pure(bcs.vector(bcs.u8()).serialize(signedEncryptionKey));\n\tlet pureSuiPubKey = tx.pure(bcs.vector(bcs.u8()).serialize(keypair.getPublicKey().toRawBytes()));\n\n\ttx.moveCall({\n\t\ttarget: `${packageId}::${dWalletModuleName}::register_encryption_key`,\n\t\targuments: [\n\t\t\tpurePubKey,\n\t\t\tpureSignedPubKey,\n\t\t\tpureSuiPubKey,\n\t\t\ttx.pure(bcs.u8().serialize(encryptionKeyScheme)),\n\t\t],\n\t});\n\tlet result = await client.signAndExecuteTransactionBlock({\n\t\tsigner: keypair,\n\t\ttransactionBlock: tx,\n\t\toptions: {\n\t\t\tshowEffects: true,\n\t\t},\n\t});\n\treturn result.effects?.created?.filter((o) => o.owner === 'Immutable')[0].reference!;\n};\n\nexport const getEncryptionKeyByObjectId = async (\n\tclient: DWalletClient,\n\tencryptionKeyObjID: string,\n) => {\n\tconst response = await client.getObject({\n\t\tid: encryptionKeyObjID,\n\t\toptions: { showContent: true },\n\t});\n\n\tconst objectFields =\n\t\tresponse.data?.content?.dataType === 'moveObject'\n\t\t\t? (response.data?.content?.fields as unknown as {\n\t\t\t\t\tencryption_key: Uint8Array;\n\t\t\t\t\tkey_owner_address: string;\n\t\t\t\t\tencryption_key_signature: Uint8Array;\n\t\t\t  })\n\t\t\t: null;\n\n\treturn objectFields\n\t\t? {\n\t\t\t\tencryptionKey: objectFields?.encryption_key,\n\t\t\t\tsignedEncryptionKey: objectFields?.encryption_key_signature,\n\t\t\t\tkeyOwnerAddress: objectFields?.key_owner_address,\n\t\t  }\n\t\t: null;\n};\n\n/**\n * Fetches an {@link EncryptedUserShare} object from the blockchain by the given object ID.\n */\nexport const getEncryptedUserShareByObjectID = async (\n\tclient: DWalletClient,\n\tobjID: string,\n): Promise<EncryptedUserShare | null> => {\n\tconst response = await client.getObject({\n\t\tid: objID,\n\t\toptions: { showContent: true },\n\t});\n\n\tconst objectFields =\n\t\tresponse.data?.content?.dataType === 'moveObject'\n\t\t\t? (response.data?.content?.fields as unknown as {\n\t\t\t\t\tdwallet_id: string;\n\t\t\t\t\tencrypted_secret_share_and_proof: number[];\n\t\t\t\t\tencryption_key_id: string;\n\t\t\t\t\tsigned_dwallet_pubkeys: number[];\n\t\t\t\t\tsender_pubkey: number[];\n\t\t\t  })\n\t\t\t: null;\n\n\treturn objectFields\n\t\t? {\n\t\t\t\tdwalletID: objectFields?.dwallet_id,\n\t\t\t\tencryptedUserShareAndProof: objectFields?.encrypted_secret_share_and_proof,\n\t\t\t\tencryptionKeyObjID: objectFields?.encryption_key_id,\n\t\t\t\tsignedDWalletPubKeys: objectFields.signed_dwallet_pubkeys,\n\t\t\t\tsenderPubKey: objectFields.sender_pubkey,\n\t\t  }\n\t\t: null;\n};\n\nexport const getActiveEncryptionKeyObjID = async (\n\tclient: DWalletClient,\n\tkeyOwnerAddress: string,\n\tencryptionKeysHolderID: string,\n): Promise<string> => {\n\tconst tx = new TransactionBlock();\n\tconst encryptionKeysHolder = tx.object(encryptionKeysHolderID);\n\n\tconsole.log(keyOwnerAddress);\n\n\ttx.moveCall({\n\t\ttarget: `${packageId}::${dWalletModuleName}::get_active_encryption_key`,\n\t\targuments: [encryptionKeysHolder, tx.pure(keyOwnerAddress)],\n\t});\n\n\tlet res = await client.devInspectTransactionBlock({\n\t\tsender: keyOwnerAddress,\n\t\ttransactionBlock: tx,\n\t});\n\n\tconst array = new Uint8Array(res.results?.at(0)?.returnValues?.at(0)?.at(0)! as number[]);\n\tconst hexString = Array.from(array)\n\t\t.map((byte) => byte.toString(16).padStart(2, '0'))\n\t\t.join('');\n\treturn hexString;\n};\n\n/**\n * Sets the given encryption key as the active encryption key for the given keypair Sui\n * address & encryption keys holder table.\n */\nexport const setActiveEncryptionKey = async (\n\tclient: DWalletClient,\n\tkeypair: Keypair,\n\tencryptionKeyObjID: string,\n\tencryptionKeysHolderID: string,\n) => {\n\tconst tx = new TransactionBlock();\n\tconst EncKeyObj = tx.object(encryptionKeyObjID);\n\tconst encryptionKeysHolder = tx.object(encryptionKeysHolderID);\n\n\ttx.moveCall({\n\t\ttarget: `${packageId}::${dWalletModuleName}::set_active_encryption_key`,\n\t\targuments: [encryptionKeysHolder, EncKeyObj],\n\t});\n\n\treturn await client.signAndExecuteTransactionBlock({\n\t\tsigner: keypair,\n\t\ttransactionBlock: tx,\n\t\toptions: {\n\t\t\tshowEffects: true,\n\t\t},\n\t});\n};\n\n/**\n * Creates the table that maps a Sui address to the Paillier encryption\n * key is derived from the Sui address secret.\n */\nexport const createActiveEncryptionKeysTable = async (client: DWalletClient, keypair: Keypair) => {\n\tconst tx = new TransactionBlock();\n\ttx.moveCall({\n\t\ttarget: `${packageId}::${dWalletModuleName}::create_active_encryption_keys`,\n\t\targuments: [],\n\t});\n\n\tlet result = await client.signAndExecuteTransactionBlock({\n\t\tsigner: keypair,\n\t\ttransactionBlock: tx,\n\t\toptions: {\n\t\t\tshowEffects: true,\n\t\t},\n\t});\n\n\treturn result.effects?.created?.filter(\n\t\t(o) =>\n\t\t\ttypeof o.owner === 'object' &&\n\t\t\t'Shared' in o.owner &&\n\t\t\to.owner.Shared.initial_shared_version !== undefined,\n\t)[0].reference!;\n};\n\nexport const transferEncryptedUserShare = async (\n\tclient: DWalletClient,\n\tkeypair: Keypair,\n\tencryptedUserShareAndProof: number[],\n\tencryptionKeyObjID: string,\n\tdwallet: DWalletToTransfer,\n\tsignedDWalletPubKeys: Uint8Array,\n) => {\n\tconst tx = new TransactionBlock();\n\tconst encryptionKey = tx.object(encryptionKeyObjID);\n\tconst dwalletObj = tx.object(dwallet.dwalletID);\n\tlet pureSuiPubKey = tx.pure(bcs.vector(bcs.u8()).serialize(keypair.getPublicKey().toRawBytes()));\n\n\ttx.moveCall({\n\t\ttarget: `${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::encrypt_user_share`,\n\t\ttypeArguments: [],\n\t\targuments: [\n\t\t\tdwalletObj,\n\t\t\tencryptionKey,\n\t\t\ttx.pure(encryptedUserShareAndProof),\n\t\t\ttx.pure([...signedDWalletPubKeys]),\n\t\t\tpureSuiPubKey,\n\t\t],\n\t});\n\n\tconst res = await client.signAndExecuteTransactionBlock({\n\t\tsigner: keypair,\n\t\ttransactionBlock: tx,\n\t\toptions: {\n\t\t\tshowEffects: true,\n\t\t},\n\t});\n\n\treturn res.effects?.created?.at(0)?.reference;\n};\n\nexport const createEncryptedUserSharesHolder = async (client: DWalletClient, keypair: Keypair) => {\n\tconst tx = new TransactionBlock();\n\ttx.moveCall({\n\t\ttarget: `${packageId}::${dWalletModuleName}::create_encrypted_user_shares`,\n\t\targuments: [],\n\t});\n\n\tlet result = await client.signAndExecuteTransactionBlock({\n\t\tsigner: keypair,\n\t\ttransactionBlock: tx,\n\t\toptions: {\n\t\t\tshowEffects: true,\n\t\t},\n\t});\n\n\treturn result.effects?.created?.at(0)?.reference;\n};\n\nexport const getEncryptedUserSharesObjID = async (client: DWalletClient, keypair: Keypair) => {\n\tconst table = await fetchOwnedObjectByType(\n\t\t`${packageId}::${dWalletModuleName}::EncryptedUserShares`,\n\t\tkeypair,\n\t\tclient,\n\t);\n\tconst tableFields =\n\t\ttable?.dataType === 'moveObject'\n\t\t\t? (table.fields as {\n\t\t\t\t\tid: { id: string };\n\t\t\t  })\n\t\t\t: null;\n\n\tif (table === null) {\n\t\tconst newTable = await createEncryptedUserSharesHolder(client, keypair);\n\t\treturn newTable?.objectId;\n\t}\n\treturn tableFields?.id.id;\n};\n\nexport const saveEncryptedUserShare = async (\n\tclient: DWalletClient,\n\tkeypair: Keypair,\n\tencryptionKeyID: string,\n\tencryptedUserShareId: string,\n) => {\n\tconst tx = new TransactionBlock();\n\tconst encKey = tx.object(encryptionKeyID);\n\tconst encryptedUserShare = tx.object(encryptedUserShareId);\n\tconst encryptedUserSharesId = await getEncryptedUserSharesObjID(client, keypair);\n\n\ttx.moveCall({\n\t\ttarget: `${packageId}::${dWalletModuleName}::save_encrypted_user_share`,\n\t\targuments: [tx.object(encryptedUserSharesId!), encryptedUserShare, encKey],\n\t});\n\n\treturn await client.signAndExecuteTransactionBlock({\n\t\tsigner: keypair,\n\t\ttransactionBlock: tx,\n\t\toptions: {\n\t\t\tshowEffects: true,\n\t\t},\n\t});\n};\n\n/**\n * Retrieve the encrypted user share that the user encrypted to itself from the dwallet ID.\n * First fetches the user's `EncryptedUserShares` table, and from it fetches the encrypted user share.\n */\nexport const getEncryptedUserShare = async (\n\tclient: DWalletClient,\n\tkeypair: Keypair,\n\tdwalletID: string,\n): Promise<string> => {\n\tlet encryptedUserSharesObjID = await getEncryptedUserSharesObjID(client, keypair);\n\tconst tx = new TransactionBlock();\n\tconst encryptedUserSharesObj = tx.object(encryptedUserSharesObjID!);\n\n\ttx.moveCall({\n\t\ttarget: `${packageId}::${dWalletModuleName}::get_encrypted_user_share_by_dwallet_id`,\n\t\targuments: [encryptedUserSharesObj, tx.pure(dwalletID)],\n\t});\n\n\tlet res = await client.devInspectTransactionBlock({\n\t\tsender: keypair.toSuiAddress(),\n\t\ttransactionBlock: tx,\n\t});\n\tconst array = new Uint8Array(res.results?.at(0)?.returnValues?.at(0)?.at(0)! as number[]);\n\treturn Array.from(array)\n\t\t.map((byte) => byte.toString(16).padStart(2, '0'))\n\t\t.join('');\n};\n"],
  "mappings": "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",
  "names": ["EncryptionKeyScheme"]
}
