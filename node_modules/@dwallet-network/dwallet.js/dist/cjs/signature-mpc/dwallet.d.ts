import type { DWalletClient } from '../client/index.js';
import type { Keypair } from '../cryptography/index.js';
import type { SuiObjectRef } from '../types/index.js';
import type { DWallet } from './dwallet_2pc_mpc_ecdsa_k1_module.js';
import type { DWalletToTransfer, EncryptedUserShare } from './encrypt_user_share.js';
export declare enum EncryptionKeyScheme {
    Paillier = 0
}
export declare const getDwalletByObjID: (client: DWalletClient, dwalletObjID: string) => Promise<DWallet | null>;
export declare function hashToNumber(hash: 'KECCAK256' | 'SHA256'): 0 | 1;
export declare function approveAndSign(dwalletCapId: string, signMessagesId: string, messages: Uint8Array[], dwalletID: string, hash: 'KECCAK256' | 'SHA256', keypair: Keypair, client: DWalletClient): Promise<Uint8Array[]>;
export interface SignOutputEventData {
    signatures: Uint8Array[];
    dwallet_id: string;
}
export declare const waitForSignOutput: (client: DWalletClient) => Promise<Uint8Array[]>;
/**
 * Store the given Paillier encryption key in the blockchain.
 */
export declare const storeEncryptionKey: (encryptionKey: Uint8Array, encryptionKeyScheme: EncryptionKeyScheme, keypair: Keypair, client: DWalletClient) => Promise<SuiObjectRef>;
export declare const getEncryptionKeyByObjectId: (client: DWalletClient, encryptionKeyObjID: string) => Promise<{
    encryptionKey: Uint8Array;
    signedEncryptionKey: Uint8Array;
    keyOwnerAddress: string;
} | null>;
/**
 * Fetches an {@link EncryptedUserShare} object from the blockchain by the given object ID.
 */
export declare const getEncryptedUserShareByObjectID: (client: DWalletClient, objID: string) => Promise<EncryptedUserShare | null>;
export declare const getActiveEncryptionKeyObjID: (client: DWalletClient, keyOwnerAddress: string, encryptionKeysHolderID: string) => Promise<string>;
/**
 * Sets the given encryption key as the active encryption key for the given keypair Sui
 * address & encryption keys holder table.
 */
export declare const setActiveEncryptionKey: (client: DWalletClient, keypair: Keypair, encryptionKeyObjID: string, encryptionKeysHolderID: string) => Promise<import("../client/index.js").SuiTransactionBlockResponse>;
/**
 * Creates the table that maps a Sui address to the Paillier encryption
 * key is derived from the Sui address secret.
 */
export declare const createActiveEncryptionKeysTable: (client: DWalletClient, keypair: Keypair) => Promise<import("../client/index.js").SuiObjectRef>;
export declare const transferEncryptedUserShare: (client: DWalletClient, keypair: Keypair, encryptedUserShareAndProof: number[], encryptionKeyObjID: string, dwallet: DWalletToTransfer, signedDWalletPubKeys: Uint8Array) => Promise<import("../client/index.js").SuiObjectRef | undefined>;
export declare const createEncryptedUserSharesHolder: (client: DWalletClient, keypair: Keypair) => Promise<import("../client/index.js").SuiObjectRef | undefined>;
export declare const getEncryptedUserSharesObjID: (client: DWalletClient, keypair: Keypair) => Promise<string | undefined>;
export declare const saveEncryptedUserShare: (client: DWalletClient, keypair: Keypair, encryptionKeyID: string, encryptedUserShareId: string) => Promise<import("../client/index.js").SuiTransactionBlockResponse>;
/**
 * Retrieve the encrypted user share that the user encrypted to itself from the dwallet ID.
 * First fetches the user's `EncryptedUserShares` table, and from it fetches the encrypted user share.
 */
export declare const getEncryptedUserShare: (client: DWalletClient, keypair: Keypair, dwalletID: string) => Promise<string>;
