import type { DWalletClient } from '../client/index.js';
import type { Keypair } from '../cryptography/index.js';
import type { Ed25519Keypair } from '../keypairs/ed25519/index.js';
import { Ed25519PublicKey } from '../keypairs/ed25519/index.js';
import type { EncryptedUserShare, EncryptionKeyPair } from './encrypt_user_share.js';
export declare const decryptAndVerifyUserShare: (sourcePublicKey: Ed25519PublicKey, expectedSourceSuiAddress: string, dkgOutput: number[], encryptedUserShareObj: EncryptedUserShare, encryptionKeyObj: EncryptionKeyPair) => Promise<Uint8Array>;
export declare const acceptUserShare: (encryptedUserShare: EncryptedUserShare, expectedSourceSuiAddress: string, encryptionKeyObj: EncryptionKeyPair, dwalletID: string, encryptionKeysHolderObjID: string, client: DWalletClient, keypair: Keypair) => Promise<boolean>;
/**
 * Pre-signs the given message with the given DWallet ID.
 *
 * @param client
 * @param keypair The Sui keypair that encrypted the given dwallet to itself in the past. This keypair is
 * either the one who created the dwallet with the {@link createDWallet} function, or the one who accepted
 * it with the {@link acceptUserShare} function.
 * @param dwalletID
 * @param message
 * @param hash
 * @param activeEncryptionKeysTableID
 */
export declare const presignWithDWalletID: (client: DWalletClient, keypair: Ed25519Keypair, dwalletID: string, message: Uint8Array, hash: 'KECCAK256' | 'SHA256', activeEncryptionKeysTableID: string) => Promise<string | null>;
