{
  "version": 3,
  "sources": ["../../../src/signature-mpc/dwallet_2pc_mpc_ecdsa_k1_module.ts"],
  "sourcesContent": ["// Copyright (c) dWallet Labs, Ltd.\n// SPDX-License-Identifier: BSD-3-Clause-Clear\n\nimport {\n\tfinalize_dkg,\n\tfinalize_presign,\n\tinitiate_dkg,\n\tinitiate_presign,\n\tinitiate_sign,\n\tserialized_pubkeys_from_centralized_dkg_output,\n} from '@dwallet-network/signature-mpc-wasm';\n\nimport { bcs } from '../bcs/index.js';\nimport { TransactionBlock } from '../builder/index.js';\nimport type { DWalletClient } from '../client/index.js';\nimport type { Keypair } from '../cryptography/index.js';\nimport { hashToNumber, saveEncryptedUserShare } from './dwallet.js';\nimport { fetchObjectBySessionId } from './utils.js';\n\nexport {\n\tdecrypt_user_share,\n\tgenerate_keypair,\n\tgenerate_proof,\n\tgenerate_keypair_from_seed,\n} from '@dwallet-network/signature-mpc-wasm';\n\nconst packageId = '0x3';\nconst dWallet2PCMPCECDSAK1ModuleName = 'dwallet_2pc_mpc_ecdsa_k1';\n\nexport type CreatedDwallet = {\n\tdwalletID: string;\n\tcentralizedDKGOutput: number[];\n\tdecentralizedDKGOutput: number[];\n\tdwalletCapID: string;\n\tsecretKeyShare: number[];\n\tencryptedSecretShareObjID: string;\n};\n\nexport async function createDWallet(\n\tkeypair: Keypair,\n\tclient: DWalletClient,\n\tencryptionKey: Uint8Array,\n\tencryptionKeyObjId: string,\n): Promise<CreatedDwallet | null> {\n\tconst resultDKG = initiate_dkg();\n\n\tconst commitmentToSecretKeyShare = resultDKG['commitment_to_secret_key_share'];\n\tconst decommitmentRoundPartyState = resultDKG['decommitment_round_party_state'];\n\n\tconst tx = new TransactionBlock();\n\tconst [cap] = tx.moveCall({\n\t\ttarget: `${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::create_dkg_session`,\n\t\targuments: [tx.pure(commitmentToSecretKeyShare)],\n\t});\n\ttx.transferObjects([cap], keypair.toSuiAddress());\n\tconst result = await client.signAndExecuteTransactionBlock({\n\t\tsigner: keypair,\n\t\ttransactionBlock: tx,\n\t\toptions: {\n\t\t\tshowEffects: true,\n\t\t},\n\t});\n\n\tconst sessionRef = result.effects?.created?.filter((o) => o.owner === 'Immutable')[0].reference!;\n\n\tconst sessionOutput = await fetchObjectBySessionId(\n\t\tsessionRef.objectId,\n\t\t`${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::DKGSessionOutput`,\n\t\tkeypair,\n\t\tclient,\n\t);\n\tconst sessionOutputFields =\n\t\tsessionOutput?.dataType === 'moveObject'\n\t\t\t? (sessionOutput.fields as {\n\t\t\t\t\tid: { id: string };\n\t\t\t\t\tsecret_key_share_encryption_and_proof: number[];\n\t\t\t  })\n\t\t\t: null;\n\n\tif (sessionOutputFields) {\n\t\tconst final = finalize_dkg(\n\t\t\tdecommitmentRoundPartyState,\n\t\t\tUint8Array.from(sessionOutputFields.secret_key_share_encryption_and_proof),\n\t\t\tencryptionKey,\n\t\t);\n\t\tlet serializedPubKeys = serialized_pubkeys_from_centralized_dkg_output(final['dkg_output']);\n\t\tconst txFinal = new TransactionBlock();\n\t\ttxFinal.moveCall({\n\t\t\ttarget: `${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::create_dwallet`,\n\t\t\targuments: [\n\t\t\t\ttxFinal.object(sessionOutputFields.id.id),\n\t\t\t\ttxFinal.pure(final['public_key_share_decommitment_and_proof']),\n\t\t\t\ttxFinal.pure(encryptionKeyObjId),\n\t\t\t\ttxFinal.pure(final['encrypted_user_share_and_proof']),\n\t\t\t\ttxFinal.pure([...(await keypair.sign(serializedPubKeys))]),\n\t\t\t\ttxFinal.pure([...keypair.getPublicKey().toRawBytes()]),\n\t\t\t],\n\t\t});\n\t\tconst signResult = await client.signAndExecuteTransactionBlock({\n\t\t\tsigner: keypair,\n\t\t\ttransactionBlock: txFinal,\n\t\t\toptions: {\n\t\t\t\tshowEffects: true,\n\t\t\t},\n\t\t});\n\n\t\tlet dwalletRef = signResult.effects?.created?.filter((o) => {\n\t\t\treturn o.owner === 'Immutable';\n\t\t})[0].reference!;\n\t\tlet encryptedShareRef = signResult.effects?.created?.filter((o) => o.owner === 'Immutable')[1]\n\t\t\t.reference!;\n\n\t\tlet dwalletObject = await client.getObject({\n\t\t\tid: dwalletRef.objectId,\n\t\t\toptions: { showContent: true },\n\t\t});\n\t\tlet dwalletObjectFields =\n\t\t\tdwalletObject.data?.content?.dataType === 'moveObject'\n\t\t\t\t? (dwalletObject.data?.content?.fields as {\n\t\t\t\t\t\tdwallet_cap_id: string;\n\t\t\t\t\t\toutput: number[];\n\t\t\t\t  })\n\t\t\t\t: null;\n\t\tif (!dwalletObjectFields?.dwallet_cap_id) {\n\t\t\t// This may happen as the order of the created objects is not guaranteed,\n\t\t\t// and we can't know the object type from the reference.\n\t\t\tlet tempRef = dwalletRef;\n\t\t\tdwalletRef = encryptedShareRef;\n\t\t\tencryptedShareRef = tempRef;\n\t\t\tdwalletObject = await client.getObject({\n\t\t\t\tid: dwalletRef.objectId,\n\t\t\t\toptions: { showContent: true },\n\t\t\t});\n\t\t\tdwalletObjectFields =\n\t\t\t\tdwalletObject.data?.content?.dataType === 'moveObject'\n\t\t\t\t\t? (dwalletObject.data?.content?.fields as {\n\t\t\t\t\t\t\tdwallet_cap_id: string;\n\t\t\t\t\t\t\toutput: number[];\n\t\t\t\t\t  })\n\t\t\t\t\t: null;\n\t\t}\n\t\tawait saveEncryptedUserShare(client, keypair, encryptionKeyObjId, encryptedShareRef.objectId);\n\t\treturn dwalletObjectFields\n\t\t\t? {\n\t\t\t\t\tdwalletID: dwalletRef?.objectId,\n\t\t\t\t\tcentralizedDKGOutput: final['dkg_output'],\n\t\t\t\t\tdecentralizedDKGOutput: dwalletObjectFields.output,\n\t\t\t\t\tdwalletCapID: dwalletObjectFields.dwallet_cap_id,\n\t\t\t\t\tsecretKeyShare: final['secret_key_share'],\n\t\t\t\t\tencryptedSecretShareObjID: encryptedShareRef.objectId,\n\t\t\t  }\n\t\t\t: null;\n\t}\n\treturn null;\n}\n\nexport type DWallet = {\n\tdwalletID: string;\n\tdecentralizedDKGOutput: number[];\n\tdwalletCapID: string;\n};\n\nexport async function createPartialUserSignedMessages(\n\tdwalletID: string,\n\tdecentralizedDKGOutput: number[],\n\tsecretKeyShare: Uint8Array,\n\tmessages: Uint8Array[],\n\thash: 'KECCAK256' | 'SHA256',\n\tkeypair: Keypair,\n\tclient: DWalletClient,\n) {\n\tconst resultPresign = initiate_presign(\n\t\tUint8Array.of(...decentralizedDKGOutput),\n\t\tsecretKeyShare,\n\t\tmessages.length,\n\t);\n\n\tconst nonceSharesCommitmentsAndBatchedProof =\n\t\tresultPresign['nonce_shares_commitments_and_batched_proof'];\n\tconst signatureNonceSharesAndCommitmentRandomnesses =\n\t\tresultPresign['signature_nonce_shares_and_commitment_randomnesses'];\n\n\tconst hashNum = hashToNumber(hash);\n\n\tconst tx = new TransactionBlock();\n\ttx.moveCall({\n\t\ttarget: `${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::create_presign_session`,\n\t\targuments: [\n\t\t\ttx.object(dwalletID),\n\t\t\ttx.pure(bcs.vector(bcs.vector(bcs.u8())).serialize(messages)),\n\t\t\ttx.pure(nonceSharesCommitmentsAndBatchedProof),\n\t\t\ttx.pure.u8(hashNum),\n\t\t],\n\t});\n\tconst result = await client.signAndExecuteTransactionBlock({\n\t\tsigner: keypair,\n\t\ttransactionBlock: tx,\n\t\toptions: {\n\t\t\tshowEffects: true,\n\t\t},\n\t});\n\n\tconst sessionRef = result.effects?.created?.filter((o) => o.owner === 'Immutable')[0].reference!;\n\n\tconst sessionOutput = await fetchObjectBySessionId(\n\t\tsessionRef.objectId,\n\t\t`${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::PresignSessionOutput`,\n\t\tkeypair,\n\t\tclient,\n\t);\n\n\tconst sessionOutputFields =\n\t\tsessionOutput?.dataType === 'moveObject'\n\t\t\t? (sessionOutput.fields as {\n\t\t\t\t\tid: { id: string };\n\t\t\t\t\toutput: number[];\n\t\t\t  })\n\t\t\t: null;\n\n\tif (sessionOutputFields) {\n\t\tconst presigns = finalize_presign(\n\t\t\tUint8Array.of(...decentralizedDKGOutput),\n\t\t\tsecretKeyShare,\n\t\t\tsignatureNonceSharesAndCommitmentRandomnesses,\n\t\t\tUint8Array.from(sessionOutputFields.output),\n\t\t);\n\n\t\tconst presignOutput = await fetchObjectBySessionId(\n\t\t\tsessionRef.objectId,\n\t\t\t`${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::Presign`,\n\t\t\tkeypair,\n\t\t\tclient,\n\t\t);\n\n\t\tconst presignOutputFields =\n\t\t\tpresignOutput?.dataType === 'moveObject'\n\t\t\t\t? (presignOutput.fields as {\n\t\t\t\t\t\tid: { id: string };\n\t\t\t\t  })\n\t\t\t\t: null;\n\n\t\tif (presignOutputFields) {\n\t\t\tconst bcsMessages = bcs.vector(bcs.vector(bcs.u8())).serialize(messages).toBytes();\n\n\t\t\tconst publicNonceEncryptedPartialSignatureAndProofs = initiate_sign(\n\t\t\t\tUint8Array.of(...decentralizedDKGOutput),\n\t\t\t\tsecretKeyShare,\n\t\t\t\tpresigns,\n\t\t\t\tbcsMessages,\n\t\t\t\thashNum,\n\t\t\t);\n\n\t\t\tconst txFinal = new TransactionBlock();\n\t\t\tconst [signMessagesObject] = txFinal.moveCall({\n\t\t\t\ttarget: `${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::create_partial_user_signed_messages`,\n\t\t\t\targuments: [\n\t\t\t\t\ttxFinal.object(dwalletID),\n\t\t\t\t\ttxFinal.object(sessionRef.objectId),\n\t\t\t\t\ttxFinal.object(sessionOutputFields.id.id),\n\t\t\t\t\ttxFinal.object(presignOutputFields.id.id),\n\t\t\t\t\ttxFinal.pure(publicNonceEncryptedPartialSignatureAndProofs),\n\t\t\t\t],\n\t\t\t});\n\t\t\ttxFinal.transferObjects([signMessagesObject], keypair.toSuiAddress());\n\t\t\tconst resultFinal = await client.signAndExecuteTransactionBlock({\n\t\t\t\tsigner: keypair,\n\t\t\t\ttransactionBlock: txFinal,\n\t\t\t\toptions: {\n\t\t\t\t\tshowEffects: true,\n\t\t\t\t\tshowObjectChanges: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn resultFinal.effects?.created?.at(0)?.reference.objectId!;\n\t\t}\n\t}\n\treturn null;\n}\n"],
  "mappings": "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",
  "names": ["import_signature_mpc_wasm"]
}
