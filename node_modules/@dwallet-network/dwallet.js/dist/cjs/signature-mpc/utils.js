"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  fetchObjectBySessionId: () => fetchObjectBySessionId,
  fetchOwnedObjectByType: () => fetchOwnedObjectByType,
  generatePaillierKeyPairFromSuiKeyPair: () => generatePaillierKeyPairFromSuiKeyPair
});
module.exports = __toCommonJS(utils_exports);
var import_signature_mpc_wasm = require("@dwallet-network/signature-mpc-wasm");
var import_ethers = require("ethers");
async function fetchObjectBySessionId(sessionId, type, keypair, client) {
  let cursor = null;
  for (; ; ) {
    const objects = await client.getOwnedObjects({ owner: keypair.toSuiAddress(), cursor });
    const objectsContent = await client.multiGetObjects({
      ids: objects.data.map((o) => o.data?.objectId),
      options: { showContent: true }
    });
    const objectsFiltered = objectsContent.map((o) => o.data?.content).filter((o) => {
      return (
        // @ts-ignore
        o?.dataType === "moveObject" && o?.type === type && o.fields["session_id"] === sessionId
      );
    });
    if (objectsFiltered.length > 0) {
      return objectsFiltered[0];
    } else if (objects.hasNextPage) {
      cursor = objects.nextCursor;
    } else {
      cursor = null;
    }
    await new Promise((r) => setTimeout(r, 500));
  }
}
async function fetchOwnedObjectByType(type, keypair, client) {
  let cursor = null;
  for (; ; ) {
    const objects = await client.getOwnedObjects({ owner: keypair.toSuiAddress(), cursor });
    const objectsContent = await client.multiGetObjects({
      ids: objects.data.map((o) => o.data?.objectId),
      options: { showContent: true }
    });
    const objectsFiltered = objectsContent.map((o) => o.data?.content).filter((o) => {
      return (
        // @ts-ignore
        o?.dataType === "moveObject" && o?.type === type
      );
    });
    if (objectsFiltered.length > 0) {
      return objectsFiltered[0];
    }
    return null;
  }
}
const generatePaillierKeyPairFromSuiKeyPair = (keypair) => {
  let stringHashedPK = (0, import_ethers.keccak256)(import_ethers.ethers.toUtf8Bytes(keypair.export().privateKey));
  let hashedPrivateKey = import_ethers.ethers.toBeArray(stringHashedPK);
  return (0, import_signature_mpc_wasm.generate_keypair_from_seed)(hashedPrivateKey);
};
//# sourceMappingURL=utils.js.map
