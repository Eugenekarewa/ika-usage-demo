"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var rpc_exports = {};
__export(rpc_exports, {
  getBeaconBlockData: () => getBeaconBlockData,
  getBootstrapData: () => getBootstrapData,
  getFinalityUpdate: () => getFinalityUpdate,
  getOptimisticUpdate: () => getOptimisticUpdate,
  getProof: () => getProof,
  getUpdates: () => getUpdates,
  getVerifiedBeaconBlock: () => getVerifiedBeaconBlock
});
module.exports = __toCommonJS(rpc_exports);
var import_types = require("@lodestar/types");
var import_ethers = require("ethers");
var import_utils = require("./utils.js");
const MAX_REQUEST_LIGHT_CLIENT_UPDATES = 128;
async function getProof(message, dwalletID, dataSlot, contractAddress, latestFinalizedBlockNumber, executionRpc) {
  let storageSlot = (0, import_utils.calculateMessageStorageSlot)(message, dwalletID, dataSlot);
  return await getProofByStorageSlot(
    executionRpc,
    contractAddress,
    [storageSlot],
    latestFinalizedBlockNumber
  );
}
async function getBeaconBlockData(consensusRpc, finalityUpdateJson) {
  let block = await getVerifiedBeaconBlock(consensusRpc, finalityUpdateJson);
  block = (0, import_utils.keysToSnakeCase)(block);
  let blockJsonString = JSON.stringify(block, (key, value) => {
    if (key === "body") {
      return void 0;
    }
    return value;
  });
  let blockBody = block.body;
  let blockBodyJsonString = JSON.stringify(blockBody, (key, value) => {
    if (key === "execution_payload") {
      return void 0;
    }
    return value;
  });
  let blockExecutionPayload = blockBody.execution_payload;
  let blockExecutionPayloadJsonString = JSON.stringify(blockExecutionPayload);
  let result = {
    blockJsonString,
    blockBodyJsonString,
    blockExecutionPayloadJsonString,
    blockType: finalityUpdateJson["version"],
    latestFinalizedBlockNumber: blockExecutionPayload.block_number
  };
  return result;
}
async function getUpdates(consensusRpc, syncPeriod) {
  let reqUrl = `${consensusRpc}/eth/v1/beacon/light_client/updates?start_period=${syncPeriod}&count=${MAX_REQUEST_LIGHT_CLIENT_UPDATES}`;
  const response = await fetch(reqUrl);
  if (!response.ok) {
    throw new Error(`could not fetch updates. HTTP Response status: ${response.status}`);
  }
  return await response.json();
}
async function getFinalityUpdate(consensusRpc) {
  let reqUrl = `${consensusRpc}/eth/v1/beacon/light_client/finality_update`;
  const response = await fetch(reqUrl);
  if (!response.ok) {
    throw new Error(`could not fetch finality update. HTTP Response status: ${response.status}`);
  }
  return await response.json();
}
async function getOptimisticUpdate(consensusRpc) {
  let reqUrl = `${consensusRpc}/eth/v1/beacon/light_client/finality_update`;
  const response = await fetch(reqUrl);
  if (!response.ok) {
    throw new Error(`could not fetch optimistic update. HTTP Response status: ${response.status}`);
  }
  return await response.json();
}
async function getBootstrapData(rpc, checkpoint) {
  const reqUrl = `${rpc}/eth/v1/beacon/light_client/bootstrap/${checkpoint}`;
  const response = await fetch(reqUrl);
  if (!response.ok) {
    throw new Error(`could not fetch bootstrap data. HTTP Response status: ${response.status}`);
  }
  return await response.json();
}
const getVerifiedBeaconBlock = async (consensusRpc, verifiedFinalityHeader) => {
  let blockType = verifiedFinalityHeader["version"];
  const finalizedHeader = import_types.ssz.deneb.LightClientHeader.fromJson(
    verifiedFinalityHeader["data"]["finalized_header"]
  );
  let verifiedFinalizedHeaderHash = import_types.ssz.phase0.BeaconBlockHeader.hashTreeRoot(
    finalizedHeader.beacon
  );
  let slot = finalizedHeader["beacon"]["slot"];
  let beaconBlock = await getBeaconBlock(consensusRpc, slot);
  let beaconBlockData = beaconBlock["data"]["message"];
  let beaconBlockHash;
  let block;
  switch (blockType) {
    case "phase0":
      block = import_types.ssz.phase0.BeaconBlock.fromJson(beaconBlockData);
      beaconBlockHash = import_types.ssz.phase0.BeaconBlock.hashTreeRoot(block);
      break;
    case "altair":
      block = import_types.ssz.altair.BeaconBlock.fromJson(beaconBlockData);
      beaconBlockHash = import_types.ssz.altair.BeaconBlock.hashTreeRoot(block);
      break;
    case "bellatrix":
      block = import_types.ssz.bellatrix.BeaconBlock.fromJson(beaconBlockData);
      beaconBlockHash = import_types.ssz.bellatrix.BeaconBlock.hashTreeRoot(block);
      break;
    case "capella":
      block = import_types.ssz.capella.BeaconBlock.fromJson(beaconBlockData);
      beaconBlockHash = import_types.ssz.capella.BeaconBlock.hashTreeRoot(block);
      break;
    case "deneb":
      block = import_types.ssz.deneb.BeaconBlock.fromJson(beaconBlockData);
      beaconBlockHash = import_types.ssz.deneb.BeaconBlock.hashTreeRoot(block);
      break;
    default:
      throw new Error("Invalid block type");
  }
  if (!(0, import_utils.compareUint8Arrays)(beaconBlockHash, verifiedFinalizedHeaderHash)) {
    throw new Error("Finality header does not match block");
  }
  return beaconBlockData;
};
async function getProofByStorageSlot(executionRpc, contractAddress, slots, latestFinalizedBlockNumber) {
  let address;
  let provider = new import_ethers.ethers.JsonRpcProvider(executionRpc);
  if (!import_ethers.ethers.isAddress(contractAddress)) {
    address = await provider.resolveName(contractAddress);
    if (address === null) {
      throw new Error("Invalid contract address");
    }
  } else {
    address = contractAddress;
  }
  let blockNumber = latestFinalizedBlockNumber <= 0 ? "latest" : import_ethers.ethers.toQuantity(latestFinalizedBlockNumber);
  return await provider.send("eth_getProof", [address, slots, blockNumber]);
}
async function getBeaconBlock(consensusRpc, slot) {
  let reqUrl = `${consensusRpc}/eth/v2/beacon/blocks/${slot}`;
  const response = await fetch(reqUrl);
  if (!response.ok) {
    throw new Error(`could not fetch beacon block. HTTP Response status: ${response.status}`);
  }
  return await response.json();
}
//# sourceMappingURL=rpc.js.map
