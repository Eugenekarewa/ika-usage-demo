interface VerifiedFinalityHeader {
    version: 'phase0' | 'altair' | 'bellatrix' | 'capella' | 'deneb';
    data: any;
}
type BeaconBlockData = {
    blockJsonString: string;
    blockBodyJsonString: string;
    blockExecutionPayloadJsonString: string;
    blockType: string;
    latestFinalizedBlockNumber: number;
};
/**
 * Retrieves a Merkle proof for a specific storage slot in an Ethereum smart contract.
 *
 * **Logic**
 * 1. **Calculate Storage Slot**: Calculates the storage slot for the given message and dWallet ID.
 * 2. **Fetch Proof**: Calls `getProofByStorageSlot` to retrieve the Merkle proof from the Ethereum execution client.
 *
 * **Arguments**
 * @param {string} message - The message associated with the storage slot.
 * @param {string} dwalletID - The dWallet ID.
 * @param {number} dataSlot - The data slot in the smart contract's storage.
 * @param {string} contractAddress - The Ethereum smart contract address.
 * @param {number} latestFinalizedBlockNumber - The latest finalized block number to query.
 * @param {string} executionRpc - The Ethereum execution RPC endpoint.
 *
 * **Returns**
 * The proof object retrieved from the Ethereum execution client.
 */
export declare function getProof(message: string, dwalletID: string, dataSlot: number, contractAddress: string, latestFinalizedBlockNumber: number, executionRpc: string): Promise<any>;
/**
 * Retrieves beacon block data and processes it for use in the dWallet verification process.
 *
 * **Logic**
 * 1. **Get Verified Beacon Block**: Calls `getVerifiedBeaconBlock` to retrieve and verify the beacon block.
 * 2. **Convert Keys**: Converts keys in the block data to snake_case.
 * 3. **Serialize Block Data**: Serializes the block data, excluding certain fields for efficiency.
 * 4. **Extract Execution Payload**: Extracts the execution payload from the block body.
 * 5. **Prepare Data for Transaction**: Prepares the block data strings and block type for inclusion in a transaction.
 *
 * **Arguments**
 * @param {string} consensusRpc - The Ethereum consensus RPC endpoint.
 * @param {VerifiedFinalityHeader} finalityUpdateJson - The finality update header used for verification.
 *
 * **Returns**
 * An object containing serialized block data strings, block type, and the latest finalized block number.
 * Note that the block data strings are serialized JSON objects, excluding certain fields for proper deserialization.
 *
 * **Errors**
 * Throws an error if the beacon block cannot be retrieved or verified.
 */
export declare function getBeaconBlockData(consensusRpc: string, finalityUpdateJson: VerifiedFinalityHeader): Promise<BeaconBlockData>;
/**
 * Retrieves light client updates from the Ethereum consensus client starting from a specific sync period.
 *
 * **Arguments**
 * @param {string} consensusRpc - The Ethereum consensus RPC endpoint.
 * @param {number} syncPeriod - The starting sync period for fetching updates.
 *
 * **Returns**
 * The JSON response containing the light client updates.
 */
export declare function getUpdates(consensusRpc: string, syncPeriod: number): Promise<any>;
/**
 * Retrieves the latest finality update from the Ethereum consensus client.
 *
 * **Arguments**
 * @param {string} consensusRpc - The Ethereum consensus RPC endpoint.
 *
 * **Returns**
 * The JSON response containing the finality update.
 */
export declare function getFinalityUpdate(consensusRpc: string): Promise<any>;
/**
 * Retrieves the latest optimistic update from the Ethereum consensus client.
 *
 * **Arguments**
 * @param {string} consensusRpc - The Ethereum consensus RPC endpoint.
 *
 * **Returns**
 * The JSON response containing the optimistic update.
 */
export declare function getOptimisticUpdate(consensusRpc: string): Promise<any>;
/**
 * Retrieves bootstrap data for initializing the Ethereum light client.
 *
 * **Arguments**
 * @param {string} rpc - The Ethereum consensus RPC endpoint.
 * @param {string} checkpoint - The checkpoint root (block root) to fetch the bootstrap data for.
 *
 * **Returns**
 * The JSON response containing the bootstrap data.
 */
export declare function getBootstrapData(rpc: string, checkpoint: string): Promise<any>;
/**
 * Retrieves and verifies a beacon block corresponding to a verified finality header.
 *
 * **Logic**
 * 1. **Determine Block Type**: Determines the block type from the `version` in the finality header.
 * 2. **Deserialize Finalized Header**: Deserializes the finalized header from the finality update.
 * 3. **Fetch Beacon Block**: Retrieves the beacon block corresponding to the slot in the finalized header.
 * 4. **Compute Hashes**: Computes the hash tree root of the beacon block and the finalized header.
 * 5. **Verify Match**: Compares the hashes to ensure the beacon block matches the finalized header.
 *
 * **Arguments**
 * @param {string} consensusRpc - The Ethereum consensus RPC endpoint.
 * @param {VerifiedFinalityHeader} verifiedFinalityHeader - The verified finality header.
 *
 * **Returns**
 * The beacon block data if verification succeeds.
 */
export declare const getVerifiedBeaconBlock: (consensusRpc: string, verifiedFinalityHeader: VerifiedFinalityHeader) => Promise<any>;
export {};
