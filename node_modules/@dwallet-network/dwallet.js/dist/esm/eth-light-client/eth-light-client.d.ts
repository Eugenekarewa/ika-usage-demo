import type { DWalletClient } from '../client/index.js';
import type { Keypair } from '../cryptography/index.js';
/**
 * Connects a dWallet to be controlled by an Ethereum smart contract.
 *
 * This function links a dWallet within the dWallet blockchain environment to an Ethereum smart contract.
 * By creating an Ethereum dWallet capability, it allows the dWallet to interact with Ethereum transactions
 * and be managed through the specified smart contract.
 *
 * **Arguments**
 * @param {string} dwalletCapId - The ObjectID of the dWallet capability.
 * @param {string} latestEthereumStateId - The ObjectID of the latest Ethereum state.
 * @param {Keypair} keypair - The keypair used to sign the transaction.
 * @param {DWalletClient} client - The dWallet client instance.
 */
export declare const createEthereumDWallet: (dwalletCapId: string, latestEthereumStateId: string, keypair: Keypair, client: DWalletClient) => Promise<string | undefined>;
/**
 * Initializes a shared LatestEthereumState object in the dWallet network with the given checkpoint.
 *
 * This function should only be called once to initialize the Ethereum state. After the state is initialized,
 * the Ethereum state object ID is saved, and the state is updated whenever a new state is successfully verified.
 *
 * **Logic**
 * 1. **Select Checkpoint**: Determines the initial checkpoint based on the specified Ethereum network.
 * 2. **Fetch Bootstrap Data**: Retrieves the bootstrap data required to initialize the Ethereum light client state.
 * 3. **Initialize State**: Uses the bootstrap data to initialize the Ethereum light client state in BCS format.
 * 4. **Fetch Updates**: Retrieves updates from the Ethereum consensus RPC since the initial sync period.
 * 5. **Prepare Transaction**: Constructs a transaction to call the `init_state` function in the Ethereum state module,
 *    providing the necessary arguments such as the state bytes, network, contract address, and updates.
 * 6. **Execute Transaction**: Signs and executes the transaction to initialize the Ethereum state on the dWallet network.
 *
 * **Arguments**
 * @param {string} network - The Ethereum network to initialize (e.g., 'mainnet' or 'holesky').
 * @param {string} rpc - The Ethereum consensus RPC endpoint.
 * @param {string} contractAddress - The address of the Ethereum smart contract.
 * @param {number} contractApprovedTxSlot - The slot of the data structure that holds approved transactions in the Ethereum smart contract.
 * @param {Keypair} keypair - The keypair used to sign the transaction.
 * @param {DWalletClient} client - The dWallet client instance.
 */
export declare const initEthereumState: (network: string, rpc: string, contractAddress: string, contractApprovedTxSlot: number, keypair: Keypair, client: DWalletClient) => Promise<string>;
/**
 * Approves an Ethereum transaction for a given dWallet.
 *
 * Interacts with the Ethereum light client to verify and approve a transaction message
 * using an Ethereum smart contract linked to a dWallet within the dWallet blockchain context.
 * The verification of the state and message is done offline, inside the dWallet module.
 *
 * **Logic**
 * 1. **Retrieve Configuration**: Starts by retrieving the latest Ethereum state object.
 * 2. **Fetch Ethereum Objects**: Retrieves and deserializes the latest Ethereum state and the current Ethereum state data to collect the latest Ethereum state data.
 * 3. **Initialize Light Client**: Initializes the Ethereum light client with the deserialized Ethereum state.
 * 4. **Prepare Proof Parameters**: Constructs proof request parameters using the message, dWallet ID, and data slot from the latest Ethereum state object.
 * 5. **Fetch Updates and Proofs**: Retrieves the necessary updates and cryptographic proofs from the Ethereum light client.
 * 6. **Build Transaction**: Uses the transaction builder to serialize transaction parameters, including the Ethereum state, updates, and shared state object, and prepares the transaction to call the `verify_new_state` function in the Ethereum state module.
 * 7. **Send Transaction**: Constructs the transaction data, including the proof and dWallet ID, and executes it.
 *
 * **Arguments**
 * @param {string} ethDwalletCapId - The ObjectID of the Ethereum dWallet capability, representing the link between the dWallet and Ethereum.
 * @param {string} message - The Ethereum transaction message to be approved.
 * @param {string} dWalletID - The ObjectID of the dWallet to which the transaction belongs.
 * @param {string} latestStateObjectID - The ObjectID of the latest Ethereum state.
 * @param {string} executionRpc - The Ethereum execution RPC endpoint.
 * @param {string} consensusRpc - The Ethereum consensus RPC endpoint.
 * @param {Keypair} keypair - The keypair used to sign the transaction.
 * @param {DWalletClient} client - The dWallet client instance.
 */
export declare const approveEthereumMessage: (ethDwalletCapId: string, message: string, dWalletID: string, latestStateObjectID: string, executionRpc: string, consensusRpc: string, keypair: Keypair, client: DWalletClient) => Promise<Uint8Array>;
