import type { DWalletClient } from '../client/index.js';
/**
 * Calculates the storage slot for a given message, dWallet ID, and data slot.
 * The function first calculates a key by hashing the message and the dWallet ID together.
 * Then, it calculates the mapping slot for the calculated key and the provided data slot.
 * The calculated mapping slot can be used to locate the (key, value) pair in the contract's storage.
 * @param {string} message - A string representing the message to be stored.
 * @param {string} dwalletId - A Uint8Array representing the dWallet ID.
 * @param {number} dataSlot - A BigInt value representing the data slot.
 * @returns A string representing the calculated storage slot (hexadecimal format).
 */
export declare function calculateMessageStorageSlot(message: string, dwalletId: string, dataSlot: number): string;
/**
 * Retrieves the latest Ethereum state object by its ID.
 *
 * @param {DWalletClient} client - The dWallet client instance.
 * @param {string} latestStateObjectId - The ObjectID of the latest Ethereum state.
 * @returns An object containing the latest Ethereum state fields, or null if not found.
 */
export declare const getLatestEthereumStateById: (client: DWalletClient, latestStateObjectId: string) => Promise<{
    id: string;
    eth_state_id: string;
    time_slot: bigint;
    eth_smart_contract_address: number[];
    eth_smart_contract_slot: number;
    network: string;
} | null>;
/**
 * Retrieves the Ethereum state object by its ID.
 *
 * @param {DWalletClient} client - The dWallet client instance.
 * @param {string | undefined} currentEthereumStateId - The ObjectID of the current Ethereum state.
 * @returns An object containing the Ethereum state fields, or null if not found.
 */
export declare const getEthereumStateById: (client: DWalletClient, currentEthereumStateId: string | undefined) => Promise<{
    id: string;
    data: number[];
    time_slot: number;
    latest_ethereum_state_id: string;
    state_root: number[];
    block_number: number;
} | null>;
/**
 * Converts a string to a Uint8Array and serializes it using BCS (Binary Canonical Serialization).
 *
 * @param {string} value - The string to convert and serialize.
 * @returns The serialized Uint8Array.
 */
export declare function stringToArrayU8Bcs(value: string): import("@mysten/bcs").SerializedBcs<number[], Iterable<number> & {
    length: number;
}>;
/**
 * Compares two Uint8Arrays for equality.
 *
 * @param {Uint8Array} a - The first Uint8Array to compare.
 * @param {Uint8Array} b - The second Uint8Array to compare.
 * @returns {boolean} True if both arrays are equal, false otherwise.
 */
export declare function compareUint8Arrays(a: Uint8Array, b: Uint8Array): boolean;
/**
 * Converts all keys in an object to snake_case recursively.
 *
 * @param {any} obj - The object to convert.
 * @returns {any} A new object with all keys converted to snake_case.
 */
export declare function keysToSnakeCase(obj: any): any;
