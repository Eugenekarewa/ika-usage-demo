import { ssz } from "@lodestar/types";
import { ethers } from "ethers";
import { calculateMessageStorageSlot, compareUint8Arrays, keysToSnakeCase } from "./utils.js";
const MAX_REQUEST_LIGHT_CLIENT_UPDATES = 128;
async function getProof(message, dwalletID, dataSlot, contractAddress, latestFinalizedBlockNumber, executionRpc) {
  let storageSlot = calculateMessageStorageSlot(message, dwalletID, dataSlot);
  return await getProofByStorageSlot(
    executionRpc,
    contractAddress,
    [storageSlot],
    latestFinalizedBlockNumber
  );
}
async function getBeaconBlockData(consensusRpc, finalityUpdateJson) {
  let block = await getVerifiedBeaconBlock(consensusRpc, finalityUpdateJson);
  block = keysToSnakeCase(block);
  let blockJsonString = JSON.stringify(block, (key, value) => {
    if (key === "body") {
      return void 0;
    }
    return value;
  });
  let blockBody = block.body;
  let blockBodyJsonString = JSON.stringify(blockBody, (key, value) => {
    if (key === "execution_payload") {
      return void 0;
    }
    return value;
  });
  let blockExecutionPayload = blockBody.execution_payload;
  let blockExecutionPayloadJsonString = JSON.stringify(blockExecutionPayload);
  let result = {
    blockJsonString,
    blockBodyJsonString,
    blockExecutionPayloadJsonString,
    blockType: finalityUpdateJson["version"],
    latestFinalizedBlockNumber: blockExecutionPayload.block_number
  };
  return result;
}
async function getUpdates(consensusRpc, syncPeriod) {
  let reqUrl = `${consensusRpc}/eth/v1/beacon/light_client/updates?start_period=${syncPeriod}&count=${MAX_REQUEST_LIGHT_CLIENT_UPDATES}`;
  const response = await fetch(reqUrl);
  if (!response.ok) {
    throw new Error(`could not fetch updates. HTTP Response status: ${response.status}`);
  }
  return await response.json();
}
async function getFinalityUpdate(consensusRpc) {
  let reqUrl = `${consensusRpc}/eth/v1/beacon/light_client/finality_update`;
  const response = await fetch(reqUrl);
  if (!response.ok) {
    throw new Error(`could not fetch finality update. HTTP Response status: ${response.status}`);
  }
  return await response.json();
}
async function getOptimisticUpdate(consensusRpc) {
  let reqUrl = `${consensusRpc}/eth/v1/beacon/light_client/finality_update`;
  const response = await fetch(reqUrl);
  if (!response.ok) {
    throw new Error(`could not fetch optimistic update. HTTP Response status: ${response.status}`);
  }
  return await response.json();
}
async function getBootstrapData(rpc, checkpoint) {
  const reqUrl = `${rpc}/eth/v1/beacon/light_client/bootstrap/${checkpoint}`;
  const response = await fetch(reqUrl);
  if (!response.ok) {
    throw new Error(`could not fetch bootstrap data. HTTP Response status: ${response.status}`);
  }
  return await response.json();
}
const getVerifiedBeaconBlock = async (consensusRpc, verifiedFinalityHeader) => {
  let blockType = verifiedFinalityHeader["version"];
  const finalizedHeader = ssz.deneb.LightClientHeader.fromJson(
    verifiedFinalityHeader["data"]["finalized_header"]
  );
  let verifiedFinalizedHeaderHash = ssz.phase0.BeaconBlockHeader.hashTreeRoot(
    finalizedHeader.beacon
  );
  let slot = finalizedHeader["beacon"]["slot"];
  let beaconBlock = await getBeaconBlock(consensusRpc, slot);
  let beaconBlockData = beaconBlock["data"]["message"];
  let beaconBlockHash;
  let block;
  switch (blockType) {
    case "phase0":
      block = ssz.phase0.BeaconBlock.fromJson(beaconBlockData);
      beaconBlockHash = ssz.phase0.BeaconBlock.hashTreeRoot(block);
      break;
    case "altair":
      block = ssz.altair.BeaconBlock.fromJson(beaconBlockData);
      beaconBlockHash = ssz.altair.BeaconBlock.hashTreeRoot(block);
      break;
    case "bellatrix":
      block = ssz.bellatrix.BeaconBlock.fromJson(beaconBlockData);
      beaconBlockHash = ssz.bellatrix.BeaconBlock.hashTreeRoot(block);
      break;
    case "capella":
      block = ssz.capella.BeaconBlock.fromJson(beaconBlockData);
      beaconBlockHash = ssz.capella.BeaconBlock.hashTreeRoot(block);
      break;
    case "deneb":
      block = ssz.deneb.BeaconBlock.fromJson(beaconBlockData);
      beaconBlockHash = ssz.deneb.BeaconBlock.hashTreeRoot(block);
      break;
    default:
      throw new Error("Invalid block type");
  }
  if (!compareUint8Arrays(beaconBlockHash, verifiedFinalizedHeaderHash)) {
    throw new Error("Finality header does not match block");
  }
  return beaconBlockData;
};
async function getProofByStorageSlot(executionRpc, contractAddress, slots, latestFinalizedBlockNumber) {
  let address;
  let provider = new ethers.JsonRpcProvider(executionRpc);
  if (!ethers.isAddress(contractAddress)) {
    address = await provider.resolveName(contractAddress);
    if (address === null) {
      throw new Error("Invalid contract address");
    }
  } else {
    address = contractAddress;
  }
  let blockNumber = latestFinalizedBlockNumber <= 0 ? "latest" : ethers.toQuantity(latestFinalizedBlockNumber);
  return await provider.send("eth_getProof", [address, slots, blockNumber]);
}
async function getBeaconBlock(consensusRpc, slot) {
  let reqUrl = `${consensusRpc}/eth/v2/beacon/blocks/${slot}`;
  const response = await fetch(reqUrl);
  if (!response.ok) {
    throw new Error(`could not fetch beacon block. HTTP Response status: ${response.status}`);
  }
  return await response.json();
}
export {
  getBeaconBlockData,
  getBootstrapData,
  getFinalityUpdate,
  getOptimisticUpdate,
  getProof,
  getUpdates,
  getVerifiedBeaconBlock
};
//# sourceMappingURL=rpc.js.map
