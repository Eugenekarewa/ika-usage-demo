import type { DWalletClient } from '../client/index.js';
import type { Keypair, PublicKey } from '../cryptography/index.js';
import type { Ed25519Keypair } from '../keypairs/ed25519/index.js';
export type DWalletToTransfer = {
    secretKeyShare: number[];
    decentralizedDKGOutput: number[];
    dwalletID: string;
};
export type EncryptedUserShare = {
    dwalletID: string;
    encryptedUserShareAndProof: number[];
    encryptionKeyObjID: string;
    signedDWalletPubKeys: number[];
    senderPubKey: number[];
};
/**
 * Encrypts and sends the given secret user share to the given destination public key.
 *
 * @param client The DWallet client.
 * @param keypair The Sui keypair that was used to sign the signedDWalletPubKeys.
 * @param dwallet The dWallet that we want to send the secret user share of.
 * @param destinationPublicKey The ed2551 public key of the destination Sui address.
 * @param activeEncryptionKeysTableID The ID of the table that holds the active encryption keys.
 * @param signedDWalletPubKeys The signed DWallet public keys.
 */
export declare const sendUserShareToSuiPubKey: (client: DWalletClient, keypair: Keypair, dwallet: DWalletToTransfer, destinationPublicKey: PublicKey, activeEncryptionKeysTableID: string, signedDWalletPubKeys: Uint8Array) => Promise<import("../client/index.js").SuiObjectRef | undefined>;
export declare const getEncryptedUserShareByObjID: (client: DWalletClient, objID: string) => Promise<EncryptedUserShare | null>;
export type EncryptionKeyPair = {
    encryptionKey: Uint8Array;
    decryptionKey: Uint8Array;
    objectID: string;
};
export declare const getOrCreateEncryptionKey: (keypair: Ed25519Keypair, client: DWalletClient, activeEncryptionKeysTableID: string) => Promise<EncryptionKeyPair>;
