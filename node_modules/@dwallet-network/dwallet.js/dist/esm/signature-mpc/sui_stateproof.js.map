{
  "version": 3,
  "sources": ["../../../src/signature-mpc/sui_stateproof.ts"],
  "sourcesContent": ["// Copyright (c) dWallet Labs, Ltd.\n// SPDX-License-Identifier: BSD-3-Clause-Clear\n\nimport type { SuiClient } from '@mysten/sui.js/client';\nimport axios from 'axios';\n\nimport { TransactionBlock } from '../builder/index.js';\nimport type { DWalletClient, EventId, SuiEventFilter, SuiObjectRef } from '../client/index.js';\nimport type { Keypair } from '../cryptography/index.js';\nimport type { SignOutputEventData } from './dwallet.js';\n\nconst packageId = '0x3';\nconst stateProofModuleName = 'sui_state_proof';\nconst dWalletModuleName = 'dwallet';\nconst dWallet2PCMPCECDSAK1ModuleName = 'dwallet_2pc_mpc_ecdsa_k1';\n\ntype TxDataResponse = {\n\tckp_epoch_id: number;\n\tcheckpoint_summary_bytes: Uint8Array;\n\tcheckpoint_contents_bytes: Uint8Array;\n\ttransaction_bytes: Uint8Array;\n};\n\nexport async function submitDWalletCreationProof(\n\tdwallet_client: DWalletClient,\n\tsui_client: SuiClient,\n\tconfigObjectId: string,\n\tregistryObjectId: string,\n\tdWalletCapId: string,\n\ttxId: string,\n\tserviceUrl: string,\n\tkeypair: Keypair,\n) {\n\tlet tx = await sui_client.getTransactionBlock({\n\t\tdigest: txId,\n\t\toptions: {},\n\t});\n\n\tlet seq = tx.checkpoint;\n\n\tif (!seq) {\n\t\tthrow new Error('Checkpoint is undefined or null');\n\t}\n\n\tlet { ckp_epoch_id, checkpoint_summary_bytes, checkpoint_contents_bytes, transaction_bytes } =\n\t\tawait queryTxData(txId, serviceUrl);\n\tlet txb = new TransactionBlock();\n\n\tlet dWalletCap = await getOwnedObject(dwallet_client, dWalletCapId);\n\tlet dWalletCapArg = txb.object(dWalletCap);\n\n\tlet epoch_committee_id = await retrieveEpochCommitteeIdByEpoch(\n\t\tdwallet_client,\n\t\tckp_epoch_id - 1,\n\t\tregistryObjectId,\n\t);\n\n\tlet epochCommitteeObject = await getOwnedObject(dwallet_client, epoch_committee_id);\n\tlet committeeArg = txb.object(epochCommitteeObject);\n\n\tlet configObject = await getOwnedObject(dwallet_client, configObjectId);\n\tlet configArg = txb.object(configObject);\n\n\tlet checkpoint_arg = txb.pure(checkpoint_summary_bytes);\n\tlet checkpoint_contents_arg = txb.pure(checkpoint_contents_bytes);\n\tlet transaction_arg = txb.pure(transaction_bytes);\n\n\ttxb.moveCall({\n\t\ttarget: `${packageId}::${stateProofModuleName}::create_dwallet_wrapper`,\n\t\targuments: [\n\t\t\tconfigArg,\n\t\t\tdWalletCapArg,\n\t\t\tcommitteeArg,\n\t\t\tcheckpoint_arg,\n\t\t\tcheckpoint_contents_arg,\n\t\t\ttransaction_arg,\n\t\t],\n\t});\n\treturn dwallet_client.signAndExecuteTransactionBlock({\n\t\tsigner: keypair,\n\t\ttransactionBlock: txb,\n\t\toptions: {\n\t\t\tshowEffects: true,\n\t\t},\n\t});\n}\n\nexport async function submitTxStateProof(\n\tdwallet_client: DWalletClient,\n\tsui_client: SuiClient,\n\tdWalletId: string,\n\tconfigObjectId: string,\n\tregistryObjectId: string,\n\tcapWrapperRef: SuiObjectRef,\n\tsignMessagesId: string,\n\ttxId: string,\n\tserviceUrl: string,\n\tkeypair: Keypair,\n) {\n\tlet tx = await sui_client.getTransactionBlock({\n\t\tdigest: txId,\n\t\toptions: {},\n\t});\n\n\tlet seq = tx.checkpoint;\n\n\tif (!seq) {\n\t\tthrow new Error('Checkpoint is undefined or null');\n\t}\n\n\tlet { ckp_epoch_id, checkpoint_summary_bytes, checkpoint_contents_bytes, transaction_bytes } =\n\t\tawait queryTxData(txId, serviceUrl);\n\n\tlet txb = new TransactionBlock();\n\n\tlet configObject = await getOwnedObject(dwallet_client, configObjectId);\n\tlet configArg = txb.object(configObject);\n\n\tlet capWrapperArg = txb.object({\n\t\tObject: {\n\t\t\tShared: {\n\t\t\t\tobjectId: capWrapperRef.objectId,\n\t\t\t\tinitialSharedVersion: capWrapperRef.version,\n\t\t\t\tmutable: true,\n\t\t\t},\n\t\t},\n\t});\n\n\tlet epoch_committee_id = await retrieveEpochCommitteeIdByEpoch(\n\t\tdwallet_client,\n\t\tckp_epoch_id - 1,\n\t\tregistryObjectId,\n\t);\n\tlet epochCommitteeObject = await getOwnedObject(dwallet_client, epoch_committee_id);\n\n\tlet committeeArg = txb.object(epochCommitteeObject);\n\tlet checkpointArg = txb.pure(checkpoint_summary_bytes);\n\tlet checkpointContentsArg = txb.pure(checkpoint_contents_bytes);\n\tlet transactionArg = txb.pure(transaction_bytes);\n\n\tlet [messageApprovalsVec] = txb.moveCall({\n\t\ttarget: `${packageId}::${stateProofModuleName}::transaction_state_proof`,\n\t\targuments: [\n\t\t\tconfigArg,\n\t\t\tcapWrapperArg,\n\t\t\tcommitteeArg,\n\t\t\tcheckpointArg,\n\t\t\tcheckpointContentsArg,\n\t\t\ttransactionArg,\n\t\t],\n\t});\n\n\tlet messageApprovals = txb.moveCall({\n\t\ttarget: `0x1::vector::pop_back`,\n\t\ttypeArguments: ['vector<0x3::dwallet::MessageApproval>'],\n\t\targuments: [messageApprovalsVec],\n\t});\n\n\ttxb.moveCall({\n\t\ttarget: `0x1::vector::destroy_empty`,\n\t\ttypeArguments: ['vector<0x3::dwallet::MessageApproval>'],\n\t\targuments: [messageApprovalsVec],\n\t});\n\n\t// Sign the message approvals so only signing the first vec<vec<u8>> is supported.\n\ttxb.moveCall({\n\t\ttarget: `${packageId}::${dWalletModuleName}::sign`,\n\t\ttypeArguments: [\n\t\t\t`${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::SignData`,\n\t\t\t`${packageId}::${dWallet2PCMPCECDSAK1ModuleName}::CreatedSignDataEvent`,\n\t\t],\n\t\targuments: [txb.object(signMessagesId), messageApprovals],\n\t});\n\n\tawait dwallet_client.signAndExecuteTransactionBlock({\n\t\tsigner: keypair,\n\t\ttransactionBlock: txb,\n\t\toptions: {\n\t\t\tshowEffects: true,\n\t\t},\n\t});\n\n\treturn await retrieveSignResult(dwallet_client, dWalletId);\n}\n\n// Function to query the Rust service\nasync function queryTxData(txId: string, url: string): Promise<TxDataResponse> {\n\tconst params = { tx_id: txId };\n\n\ttry {\n\t\tconst response = await axios.get(url, { params });\n\t\treturn response.data;\n\t} catch (error) {\n\t\tconsole.error('Error querying transaction data:', error);\n\t\tthrow error;\n\t}\n}\n\nasync function getOwnedObject(client: DWalletClient, id: string) {\n\tconst res = await client.getObject({ id });\n\n\tif (!res.data) {\n\t\tthrow new Error('No object found');\n\t}\n\n\treturn {\n\t\tObject: {\n\t\t\tImmOrOwned: {\n\t\t\t\tdigest: res.data.digest,\n\t\t\t\tobjectId: id,\n\t\t\t\tversion: res.data.version,\n\t\t\t},\n\t\t},\n\t};\n}\nasync function retrieveSignResult(client: DWalletClient, dWalletId: string): Promise<Uint8Array[]> {\n\tlet reqEventFiltered: any[] = [];\n\tconst queryInterval = 100;\n\n\twhile (reqEventFiltered.length === 0) {\n\t\tconst requestedEvents = await client.queryEvents({\n\t\t\tquery: {\n\t\t\t\tMoveEventType: `${packageId}::${dWalletModuleName}::SignOutputEvent`,\n\t\t\t},\n\t\t\torder: 'descending',\n\t\t});\n\n\t\treqEventFiltered = requestedEvents.data.filter((event) => {\n\t\t\tlet eventData = event.parsedJson! as SignOutputEventData;\n\t\t\treturn eventData.dwallet_id === dWalletId;\n\t\t});\n\n\t\tif (reqEventFiltered.length === 0) {\n\t\t\tawait new Promise((resolve) => setTimeout(resolve, queryInterval));\n\t\t}\n\t}\n\n\tlet eventData = reqEventFiltered[0].parsedJson! as SignOutputEventData;\n\treturn eventData.signatures;\n}\nasync function retrieveEpochCommitteeIdByEpoch(\n\tclient: DWalletClient,\n\ttargetEpoch: number,\n\ttargetRegistryId: string,\n): Promise<string> {\n\tconst query: SuiEventFilter = {\n\t\tMoveModule: {\n\t\t\tpackage: '0x0000000000000000000000000000000000000000000000000000000000000003',\n\t\t\tmodule: 'sui_state_proof',\n\t\t},\n\t};\n\n\tlet hasNext = true;\n\tlet cursor: EventId | null | undefined = null;\n\n\twhile (hasNext) {\n\t\tconst res = await client.queryEvents({ query, cursor });\n\n\t\tif (!res.data || res.data.length === 0) {\n\t\t\tthrow new Error('No events returned by the query');\n\t\t}\n\n\t\tconst filtered = res.data.find((event) => {\n\t\t\tlet json = event.parsedJson as object;\n\t\t\tif ('epoch' in json && 'registry_id' in json) {\n\t\t\t\tconst epoch = (event.parsedJson as { epoch: number })?.epoch;\n\t\t\t\tconst registryId = (event.parsedJson as { registry_id: string })?.registry_id;\n\n\t\t\t\treturn (\n\t\t\t\t\tepoch !== undefined && Number(epoch) === targetEpoch && registryId === targetRegistryId\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\tif (filtered && (filtered.parsedJson as { epoch_committee_id: string }).epoch_committee_id) {\n\t\t\treturn (filtered.parsedJson as { epoch_committee_id: string }).epoch_committee_id;\n\t\t}\n\n\t\tcursor = res.nextCursor\n\t\t\t? { eventSeq: res.nextCursor.eventSeq, txDigest: res.nextCursor.txDigest }\n\t\t\t: null;\n\t\thasNext = res.hasNextPage;\n\t}\n\n\tthrow new Error('Epoch not found');\n}\n"],
  "mappings": "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",
  "names": ["eventData"]
}
