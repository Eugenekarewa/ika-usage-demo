import { generate_keypair_from_seed } from "@dwallet-network/signature-mpc-wasm";
import { ethers, keccak256 } from "ethers";
async function fetchObjectBySessionId(sessionId, type, keypair, client) {
  let cursor = null;
  for (; ; ) {
    const objects = await client.getOwnedObjects({ owner: keypair.toSuiAddress(), cursor });
    const objectsContent = await client.multiGetObjects({
      ids: objects.data.map((o) => o.data?.objectId),
      options: { showContent: true }
    });
    const objectsFiltered = objectsContent.map((o) => o.data?.content).filter((o) => {
      return (
        // @ts-ignore
        o?.dataType === "moveObject" && o?.type === type && o.fields["session_id"] === sessionId
      );
    });
    if (objectsFiltered.length > 0) {
      return objectsFiltered[0];
    } else if (objects.hasNextPage) {
      cursor = objects.nextCursor;
    } else {
      cursor = null;
    }
    await new Promise((r) => setTimeout(r, 500));
  }
}
async function fetchOwnedObjectByType(type, keypair, client) {
  let cursor = null;
  for (; ; ) {
    const objects = await client.getOwnedObjects({ owner: keypair.toSuiAddress(), cursor });
    const objectsContent = await client.multiGetObjects({
      ids: objects.data.map((o) => o.data?.objectId),
      options: { showContent: true }
    });
    const objectsFiltered = objectsContent.map((o) => o.data?.content).filter((o) => {
      return (
        // @ts-ignore
        o?.dataType === "moveObject" && o?.type === type
      );
    });
    if (objectsFiltered.length > 0) {
      return objectsFiltered[0];
    }
    return null;
  }
}
const generatePaillierKeyPairFromSuiKeyPair = (keypair) => {
  let stringHashedPK = keccak256(ethers.toUtf8Bytes(keypair.export().privateKey));
  let hashedPrivateKey = ethers.toBeArray(stringHashedPK);
  return generate_keypair_from_seed(hashedPrivateKey);
};
export {
  fetchObjectBySessionId,
  fetchOwnedObjectByType,
  generatePaillierKeyPairFromSuiKeyPair
};
//# sourceMappingURL=utils.js.map
