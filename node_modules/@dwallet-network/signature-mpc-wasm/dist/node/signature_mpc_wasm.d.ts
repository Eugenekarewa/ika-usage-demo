/* tslint:disable */
/* eslint-disable */
/**
* @returns {any}
*/
export function initiate_dkg(): any;
/**
* @param {Uint8Array} decommitment_round_party_state
* @param {Uint8Array} secret_key_share_encryption_and_proof
* @param {Uint8Array} secret_share_encryption_key
* @returns {any}
*/
export function finalize_dkg(decommitment_round_party_state: Uint8Array, secret_key_share_encryption_and_proof: Uint8Array, secret_share_encryption_key: Uint8Array): any;
/**
* @param {Uint8Array} decentralized_dkg_output
* @param {Uint8Array} secret_share
* @param {number} batch_size
* @returns {any}
*/
export function initiate_presign(decentralized_dkg_output: Uint8Array, secret_share: Uint8Array, batch_size: number): any;
/**
* @param {Uint8Array} decentralized_dkg_output
* @param {Uint8Array} secret_share
* @param {Uint8Array} signature_nonce_shares_and_commitment_randomnesses
* @param {Uint8Array} presign_output
* @returns {any}
*/
export function finalize_presign(decentralized_dkg_output: Uint8Array, secret_share: Uint8Array, signature_nonce_shares_and_commitment_randomnesses: Uint8Array, presign_output: Uint8Array): any;
/**
* @param {Uint8Array} decentralized_dkg_output
* @param {Uint8Array} secret_share
* @param {Uint8Array} presigns
* @param {Uint8Array} messages
* @param {number} hash
* @returns {any}
*/
export function initiate_sign(decentralized_dkg_output: Uint8Array, secret_share: Uint8Array, presigns: Uint8Array, messages: Uint8Array, hash: number): any;
/**
* @param {Uint8Array} messages
* @param {number} hash
* @param {Uint8Array} dkg_output
* @param {Uint8Array} signatures
* @returns {any}
*/
export function verify_signatures(messages: Uint8Array, hash: number, dkg_output: Uint8Array, signatures: Uint8Array): any;
/**
* @param {Uint8Array} dkg_output
* @param {Uint8Array} messages
* @param {Uint8Array} public_nonce_encrypted_partial_signature_and_proofs
* @param {Uint8Array} signatures_s
* @param {number} hash
*/
export function finalize_sign(dkg_output: Uint8Array, messages: Uint8Array, public_nonce_encrypted_partial_signature_and_proofs: Uint8Array, signatures_s: Uint8Array, hash: number): void;
/**
* @param {Uint8Array} public_key
* @param {Uint8Array} message
* @param {Uint8Array} signature
* @returns {number}
*/
export function recovery_id_keccak256(public_key: Uint8Array, message: Uint8Array, signature: Uint8Array): number;
/**
* @param {Uint8Array} public_key
* @param {Uint8Array} message
* @param {Uint8Array} signature
* @returns {number}
*/
export function recovery_id_sha256(public_key: Uint8Array, message: Uint8Array, signature: Uint8Array): number;
/**
* @returns {any}
*/
export function generate_keypair(): any;
/**
* @param {Uint8Array} seed
* @returns {any}
*/
export function generate_keypair_from_seed(seed: Uint8Array): any;
/**
* @param {Uint8Array} secret_share
* @param {Uint8Array} public_key
* @returns {any}
*/
export function generate_proof(secret_share: Uint8Array, public_key: Uint8Array): any;
/**
* @param {Uint8Array} encryption_key
* @param {Uint8Array} decryption_key
* @param {Uint8Array} encrypted_user_share_and_proof
* @returns {Uint8Array}
*/
export function decrypt_user_share(encryption_key: Uint8Array, decryption_key: Uint8Array, encrypted_user_share_and_proof: Uint8Array): Uint8Array;
/**
* @param {Uint8Array} centralized_dkg_output
* @returns {Uint8Array}
*/
export function serialized_pubkeys_from_centralized_dkg_output(centralized_dkg_output: Uint8Array): Uint8Array;
/**
* @param {Uint8Array} centralized_dkg_output
* @returns {Uint8Array}
*/
export function serialized_pubkeys_from_decentralized_dkg_output(centralized_dkg_output: Uint8Array): Uint8Array;
/**
* @param {Uint8Array} secret_share
* @param {Uint8Array} dkg_output
* @returns {any}
*/
export function verify_user_share(secret_share: Uint8Array, dkg_output: Uint8Array): any;
