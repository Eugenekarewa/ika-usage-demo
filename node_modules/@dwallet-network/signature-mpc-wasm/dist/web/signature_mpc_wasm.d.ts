/* tslint:disable */
/* eslint-disable */
/**
* @returns {any}
*/
export function initiate_dkg(): any;
/**
* @param {Uint8Array} decommitment_round_party_state
* @param {Uint8Array} secret_key_share_encryption_and_proof
* @param {Uint8Array} secret_share_encryption_key
* @returns {any}
*/
export function finalize_dkg(decommitment_round_party_state: Uint8Array, secret_key_share_encryption_and_proof: Uint8Array, secret_share_encryption_key: Uint8Array): any;
/**
* @param {Uint8Array} decentralized_dkg_output
* @param {Uint8Array} secret_share
* @param {number} batch_size
* @returns {any}
*/
export function initiate_presign(decentralized_dkg_output: Uint8Array, secret_share: Uint8Array, batch_size: number): any;
/**
* @param {Uint8Array} decentralized_dkg_output
* @param {Uint8Array} secret_share
* @param {Uint8Array} signature_nonce_shares_and_commitment_randomnesses
* @param {Uint8Array} presign_output
* @returns {any}
*/
export function finalize_presign(decentralized_dkg_output: Uint8Array, secret_share: Uint8Array, signature_nonce_shares_and_commitment_randomnesses: Uint8Array, presign_output: Uint8Array): any;
/**
* @param {Uint8Array} decentralized_dkg_output
* @param {Uint8Array} secret_share
* @param {Uint8Array} presigns
* @param {Uint8Array} messages
* @param {number} hash
* @returns {any}
*/
export function initiate_sign(decentralized_dkg_output: Uint8Array, secret_share: Uint8Array, presigns: Uint8Array, messages: Uint8Array, hash: number): any;
/**
* @param {Uint8Array} messages
* @param {number} hash
* @param {Uint8Array} dkg_output
* @param {Uint8Array} signatures
* @returns {any}
*/
export function verify_signatures(messages: Uint8Array, hash: number, dkg_output: Uint8Array, signatures: Uint8Array): any;
/**
* @param {Uint8Array} dkg_output
* @param {Uint8Array} messages
* @param {Uint8Array} public_nonce_encrypted_partial_signature_and_proofs
* @param {Uint8Array} signatures_s
* @param {number} hash
*/
export function finalize_sign(dkg_output: Uint8Array, messages: Uint8Array, public_nonce_encrypted_partial_signature_and_proofs: Uint8Array, signatures_s: Uint8Array, hash: number): void;
/**
* @param {Uint8Array} public_key
* @param {Uint8Array} message
* @param {Uint8Array} signature
* @returns {number}
*/
export function recovery_id_keccak256(public_key: Uint8Array, message: Uint8Array, signature: Uint8Array): number;
/**
* @param {Uint8Array} public_key
* @param {Uint8Array} message
* @param {Uint8Array} signature
* @returns {number}
*/
export function recovery_id_sha256(public_key: Uint8Array, message: Uint8Array, signature: Uint8Array): number;
/**
* @returns {any}
*/
export function generate_keypair(): any;
/**
* @param {Uint8Array} seed
* @returns {any}
*/
export function generate_keypair_from_seed(seed: Uint8Array): any;
/**
* @param {Uint8Array} secret_share
* @param {Uint8Array} public_key
* @returns {any}
*/
export function generate_proof(secret_share: Uint8Array, public_key: Uint8Array): any;
/**
* @param {Uint8Array} encryption_key
* @param {Uint8Array} decryption_key
* @param {Uint8Array} encrypted_user_share_and_proof
* @returns {Uint8Array}
*/
export function decrypt_user_share(encryption_key: Uint8Array, decryption_key: Uint8Array, encrypted_user_share_and_proof: Uint8Array): Uint8Array;
/**
* @param {Uint8Array} centralized_dkg_output
* @returns {Uint8Array}
*/
export function serialized_pubkeys_from_centralized_dkg_output(centralized_dkg_output: Uint8Array): Uint8Array;
/**
* @param {Uint8Array} centralized_dkg_output
* @returns {Uint8Array}
*/
export function serialized_pubkeys_from_decentralized_dkg_output(centralized_dkg_output: Uint8Array): Uint8Array;
/**
* @param {Uint8Array} secret_share
* @param {Uint8Array} dkg_output
* @returns {any}
*/
export function verify_user_share(secret_share: Uint8Array, dkg_output: Uint8Array): any;

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly initiate_dkg: (a: number) => void;
  readonly finalize_dkg: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly initiate_presign: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly finalize_presign: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly initiate_sign: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
  readonly verify_signatures: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => void;
  readonly finalize_sign: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
  readonly recovery_id_keccak256: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly recovery_id_sha256: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly generate_keypair: (a: number) => void;
  readonly generate_keypair_from_seed: (a: number, b: number, c: number) => void;
  readonly generate_proof: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly decrypt_user_share: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly serialized_pubkeys_from_centralized_dkg_output: (a: number, b: number, c: number) => void;
  readonly serialized_pubkeys_from_decentralized_dkg_output: (a: number, b: number, c: number) => void;
  readonly verify_user_share: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly __wbindgen_malloc: (a: number, b: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number, c: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {{ module: SyncInitInput }} module - Passing `SyncInitInput` directly is deprecated.
*
* @returns {InitOutput}
*/
export function initSync(module: { module: SyncInitInput } | SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {{ module_or_path: InitInput | Promise<InitInput> }} module_or_path - Passing `InitInput` directly is deprecated.
*
* @returns {Promise<InitOutput>}
*/
export default function __wbg_init (module_or_path?: { module_or_path: InitInput | Promise<InitInput> } | InitInput | Promise<InitInput>): Promise<InitOutput>;
